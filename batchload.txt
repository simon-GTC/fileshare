------------------------
-- Post V1, V2.1 cleanup
------------------------
DROP VIEW IF EXISTS [dbo].[v_Security_UserToRole]
DROP VIEW IF EXISTS [dbo].[v_Security_BusinessUnits]
DROP VIEW IF EXISTS [dbo].[v_Security_T147]
DROP VIEW IF EXISTS [dbo].[v_Security_T067]
DROP VIEW IF EXISTS [dbo].[v_Security_TeamMembership]
DROP VIEW IF EXISTS [dbo].[v_Security_T154]
DROP VIEW IF EXISTS [dbo].[v_Security_AdvisoryLinks]
DROP VIEW IF EXISTS [dbo].[v_Security_BusinessUnit]
DROP VIEW IF EXISTS [dbo].[v_Security_ExceptionAccess]
DROP VIEW IF EXISTS [dbo].[v_Security_ProfileUser]
DROP VIEW IF EXISTS [dbo].[v_Security_ResponsibleParty]
DROP VIEW IF EXISTS [dbo].[v_Security_Team]
DROP VIEW IF EXISTS [dbo].[v_Security_User]
DROP VIEW IF EXISTS [dbo].[v_Security_UserRole]
DROP VIEW IF EXISTS [dbo].[v_Security_UserTeam]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_UserTeamActions]

DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_BusinessUnits]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_T067]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_T144]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_T147]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_T154]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_TeamMembership]
DROP PROCEDURE IF EXISTS [dbo].[sp_getv_Security_UserToRole]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_FilterStaging]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_PopulateStaging]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_GetAdvisoryLinkActions]

DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityLuxTecAcces]
DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityT067]
DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityT144]
DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityT146]
DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityT147]
DROP PROCEDURE IF EXISTS [dbo].[sp_UpdateSecurityT154]

DROP PROCEDURE IF EXISTS [dbo].[sp_GetSecurityRecordTypeActiveList]

DROP TABLE IF EXISTS [dbo].[BatchLoad_S2i_SecurityException]
DROP TABLE IF EXISTS [dbo].[Security_LUX_TEC_ACCES_DATA]
DROP TABLE IF EXISTS [dbo].[Security_T067]
DROP TABLE IF EXISTS [dbo].[Security_T144]
DROP TABLE IF EXISTS [dbo].[Security_T146]
DROP TABLE IF EXISTS [dbo].[Security_T147]
DROP TABLE IF EXISTS [dbo].[Security_T154]
DROP TABLE IF EXISTS [dbo].[SecuritySetting]
DROP TABLE IF EXISTS [dbo].[BatchLoad_S2i_SecurityException]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Loader_Filter]
DROP TABLE IF EXISTS BatchLoad_Source_AssetClass
DROP TABLE IF EXISTS BatchLoad_Source_AssetType
DROP TABLE IF EXISTS BatchLoad_Source_Portfolio
DROP TABLE IF EXISTS BatchLoad_Source_GeogView
DROP TABLE IF EXISTS BatchLoad_Branch
DROP TABLE IF EXISTS BatchLoad_WDX_AdvisoryLink
DROP TABLE IF EXISTS BatchLoad_WDX_Connection
DROP TABLE IF EXISTS BatchLoad_WDX_Portfolio
DROP TABLE IF EXISTS BatchLoad_WDX_ResponsibleParty
DROP TABLE IF EXISTS BatchLoad_WDX_SystemUser
DROP TABLE IF EXISTS BatchLoad_WDX_Team
DROP TABLE IF EXISTS BatchLoad_WDX_TeamMembership
DROP TABLE IF EXISTS BatchLoad_Loader_Staging_Archive
DROP TABLE IF EXISTS BatchLoad_Source_SITU_FIN_INDV
DROP TABLE IF EXISTS BatchLoad_Source_KYCReviewDate

IF (EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'RecordType')) BEGIN

	DELETE FROM RecordType WHERE ImportProcessorQualifiedName = 'CAI.DataIntegration.CSV'
END

IF (EXISTS (SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ScheduledWorkload')) BEGIN

	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%DataConsumerTaskCAI%'
	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%DataUploaderTaskCAI%'
	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%DeltaCreatorTaskCAI%'
	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%ReferenceDataImport%'
	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%SecurityDataUploaderTaskCAI%'

	DELETE FROM ScheduledWorkload WHERE Workload LIKE '%BatchLoad%'
END
GO

------------------------
-- V2 Batch Load Objects
------------------------
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_PopulateStaging]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_GetOwnerships]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_CalculateSecurityExceptions]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_CalculateBranches]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_CalculatePriority]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_CalculateStatus]
DROP PROCEDURE IF EXISTS [dbo].[sp_BatchLoad_GetInformalPowers]

DROP TABLE IF EXISTS [dbo].[BatchLoad_Id] -- DEPRECATED - This will be removed once we are sure that the global locking mechanism (GlobalLockerRoom) is fully working as intended.
DROP TABLE IF EXISTS [dbo].[Rep_SubPortfolios]
DROP TABLE IF EXISTS [dbo].[Rep_GeoView]
DROP TABLE IF EXISTS [dbo].[Rep_AssetType]
DROP TABLE IF EXISTS [dbo].[Rep_AssetClass]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Title]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Team]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_SystemUser]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_SUIVI_REL_CLI]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ResponsibleParty]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ReferenceDataType]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ReferenceDataRemediation]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Provider]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ProductAccount]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Party]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_PartyTaxCountry]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Ownership]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ManagementProfile]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Language]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_LastContactDate]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_InvestmentHorizon]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INTV]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDV_QUEST_PAYS]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDV_PAYS_ACVT]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDV_CPLM2]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDV_CPLM]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDV_CMTR]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_IndividualAddressType]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_INDIVIDU]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_IdocProduct]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_IdocParty]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_GedIntervenant]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_GedIndividual]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ExternalCustomerCode]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ExchangeRate]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_DocumentType]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_DKYC]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Currency]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Country]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ContactPoint]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_CommercialGroup]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ClientSubCategory]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_CESO]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_BusinessUnit]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_BusinessRelationship]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Loader_Type]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Loader_Staging]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Loader_Heap]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Loader]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Filter]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_ResponsibleParty]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_UserTeam]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_Team]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_TeamRole]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Mapping]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_PartyBranch]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_InformalPower]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_FormalPower]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_FormalPowerFile]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_CommercialGroupMember]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Person]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_PersonBankerSegment]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Organisation]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AvqPerp]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AvqPerm]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AvqBP]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AvqCont]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQASSET]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQLIAB]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQINCOME]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQEXPENS]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQSHARE]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AVQP2PREL]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_EAI]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ContactsForCRSRecalc]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_CountryAgreements]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_ProductAccountInvestorProfiling]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_ProfileUser]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_UserRole]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_SecurityException]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Segment]
DROP TABLE IF EXISTS [dbo].[BatchLoad_SpecialTeams]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_User]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Service]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_AccessRight]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_User]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Setting]
DROP VIEW IF EXISTS [dbo].[v_BatchLoad_Security_BusinessUnit]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Department]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_GeographicZone]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_CommercialContext]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_Account]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_InformalPowerFile]
DROP TABLE IF EXISTS [dbo].[BatchLoad_AccountOwner_RoleType]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_PowerType]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Powers_Config]
DROP TABLE IF EXISTS [dbo].[BatchLoad_Source_WdxCommercialContext]
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
 -- DEPRECATED - This will be removed once we are sure that the global locking mechanism (GlobalLockerRoom) is fully working as intended.
CREATE TABLE [dbo].[BatchLoad_Id](
	[EntityName] [varchar](100) NOT NULL,
	[PrimaryCode] [varchar](100) NOT NULL,
	[WdxId] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_BatchLoad_Id] PRIMARY KEY CLUSTERED 
(
	[EntityName] ASC,
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_GeographicZone](
	[PrimaryCode] [varchar](100) NULL,
	[GTB_TYP] [nvarchar](250) NULL,
	[GTB_CDE] [nvarchar](50) NOT NULL,
	[GTB_DES] [nvarchar](250) NULL,
	[GTB_SRT_DES] [nvarchar](250) NULL,
	[GTB_FLG_1] [nvarchar](250) NULL,
	[GTB_FLG_2] [nvarchar](250) NULL,
	[GTB_CDE_1] [nvarchar](250) NULL,
	[GTB_CDE_2] [nvarchar](250) NULL,
	[GTB_USER] [nvarchar](250) NULL,
	[GTB_DTE_CHG] [nvarchar](250) NULL,
	[GTB_VER_NBR] [nvarchar](250) NULL,
	[GTB_OTR_INF] [nvarchar](250) NULL,
	[GTB_CDE_3] [nvarchar](250) NULL,
	[GTB_CDE_4] [nvarchar](250) NULL,
	[GTB_CDE_5] [nvarchar](250) NULL,
	[MOVES_CACHE_OPT] [nvarchar](250) NULL,
	[MOVES_CACHE_DURATION] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Source_GeographicZone] PRIMARY KEY CLUSTERED 
(
	[GTB_CDE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Department](
	[PrimaryCode] [varchar](100) NULL,
	[GTB_TYP] [nvarchar](250) NULL,
	[GTB_CDE] [nvarchar](50) NOT NULL,
	[GTB_DES] [nvarchar](250) NULL,
	[GTB_SRT_DES] [nvarchar](250) NULL,
	[GTB_FLG_1] [nvarchar](250) NULL,
	[GTB_FLG_2] [nvarchar](250) NULL,
	[GTB_CDE_1] [nvarchar](250) NULL,
	[GTB_CDE_2] [nvarchar](250) NULL,
	[GTB_USER] [nvarchar](250) NULL,
	[GTB_DTE_CHG] [nvarchar](250) NULL,
	[GTB_VER_NBR] [nvarchar](250) NULL,
	[GTB_OTR_INF] [nvarchar](250) NULL,
	[GTB_CDE_3] [nvarchar](250) NULL,
	[GTB_CDE_4] [nvarchar](250) NULL,
	[GTB_CDE_5] [nvarchar](250) NULL,
	[MOVES_CACHE_OPT] [nvarchar](250) NULL,
	[MOVES_CACHE_DURATION] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Source_Department] PRIMARY KEY CLUSTERED 
(
	[GTB_CDE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


CREATE VIEW [dbo].[v_BatchLoad_Security_BusinessUnit]
AS

SELECT
	BusinessUnitPrimaryCode,
	BusinessUnitName,
	ParentBusinessUnitPrimaryCode
FROM
(
	SELECT TOP(1000) -- Using TOP to allow for ORDER BY to work inside of a VIEW
		BusinessUnitPrimaryCode,
		BusinessUnitName,
		ParentBusinessUnitPrimaryCode
	FROM
	(
		-- First level Business Units (S2i Geographic Zones T144) they all belong to WDX1
		SELECT 
			gz.GTB_CDE AS BusinessUnitPrimaryCode,
			gz.GTB_DES AS BusinessUnitName,
			'WDX1'     AS ParentBusinessUnitPrimaryCode,
			1          AS BusinessUnitLevel
		FROM BatchLoad_Source_GeographicZone gz

		UNION 

		-- Second level Business Units (S2i Departments T146)
		SELECT
			-- Postfix with DEPARTMENT to avoid duplicated Name / Primary Code as there are cases
			-- where the same GTB_CDE appears in Geographic Zones and Departments
			d.GTB_CDE + '_DEPARTMENT' AS BusinessUnitPrimaryCode, 
			d.GTB_DES + ' DEPARTMENT' AS BusinessUnitName,
			gz.GTB_CDE                AS ParentBusinessUnitPrimaryCode,
			2                         AS BusinessUnitLevel
		FROM BatchLoad_Source_Department d
			JOIN BatchLoad_Source_GeographicZone gz
				ON LEFT(d.GTB_CDE_4, 4) = gz.GTB_CDE -- Get parent Business Unit
	) BU
	ORDER BY 
		BusinessUnitLevel,
		BusinessUnitPrimaryCode

) ORDERED
GO

CREATE TABLE [dbo].[BatchLoad_Setting](
	[Name] [nvarchar](100) NOT NULL,
	[Value] [nvarchar](max) NOT NULL,
 CONSTRAINT [PK_BatchLoad_Setting] PRIMARY KEY CLUSTERED 
(
	[Name] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_User](
	[PrimaryCode] [varchar](100) NULL,
	[PERS_T154] [nvarchar](250) NULL,
	[LIB_40] [nvarchar](250) NULL,
	[INDC_RESP_CPTE] [nvarchar](250) NULL,
	[CD_SERV] [nvarchar](250) NULL,
	[USER_ID] [nvarchar](50) NOT NULL,
	[NO_GRP] [nvarchar](250) NULL,
	[NO_DON_ORD] [nvarchar](250) NULL,
	[PRT_LOC] [nvarchar](250) NULL,
	[PRT_USER] [nvarchar](250) NULL,
	[PRT_SUC] [nvarchar](250) NULL,
	[PRT_CICS] [nvarchar](250) NULL,
	[PROF_STD] [nvarchar](250) NULL,
	[NIV_SIGN] [nvarchar](250) NULL,
	[GRP_NOVELL] [nvarchar](250) NULL,
	[CD_CLI_EXTN] [nvarchar](250) NULL,
	[CD_LNG] [nvarchar](250) NULL,
	[LIEU_SERV_NOV] [nvarchar](250) NULL,
	[DT_MUT] [nvarchar](250) NULL,
	[HR_MUT] [nvarchar](250) NULL,
	[PERS_MUT] [nvarchar](250) NULL,
	[NO_VER] [nvarchar](250) NULL,
	[CD_FG] [nvarchar](250) NULL,
	[PROF_TRAN] [nvarchar](250) NULL,
	[INST_TEL] [nvarchar](250) NULL,
	[CD_ACC_CI] [nvarchar](250) NULL,
	[TYP_POST] [nvarchar](250) NULL,
	[PRT_DOC_BASE] [nvarchar](250) NULL,
	[PROF_XNET] [nvarchar](250) NULL,
	[DT_DER_CONX] [nvarchar](250) NULL,
	[HR_DER_CONX] [nvarchar](250) NULL,
	[MD_CONFI] [nvarchar](250) NULL,
	[REGN_NEWS] [nvarchar](250) NULL,
	[THEM_NEWS] [nvarchar](250) NULL,
	[HLP_AUTO] [nvarchar](250) NULL,
	[DT_ARRIV] [nvarchar](250) NULL,
	[JR_CONG_REST] [nvarchar](250) NULL,
	[CD_GRAD] [nvarchar](250) NULL,
	[DT_NAIS] [nvarchar](250) NULL,
	[CMTR] [nvarchar](250) NULL,
	[PRT_COUL] [nvarchar](250) NULL,
	[DT_OUV] [nvarchar](250) NULL,
	[HR_OUV] [nvarchar](250) NULL,
	[NO_ORD_LODT] [nvarchar](250) NULL,
	[IND_CONG_AN] [nvarchar](250) NULL,
	[PRT_NOM] [nvarchar](250) NULL,
	[CD_ACCS_CPTE_B] [nvarchar](250) NULL,
	[TYP_USER] [nvarchar](250) NULL,
	[NIV_ACCS] [nvarchar](250) NULL,
	[INDC_ANA_CR] [nvarchar](250) NULL,
	[CD_UT] [nvarchar](250) NULL,
	[CD_ETAT] [nvarchar](250) NULL,
	[NIV_DECS] [nvarchar](250) NULL,
	[PCT_ACVT] [nvarchar](250) NULL,
	[DT_PRM_CONX] [nvarchar](250) NULL,
	[HR_PRM_CONX] [nvarchar](250) NULL,
	[VER_COND_GER_ACPT] [nvarchar](250) NULL,
	[DT_ACPT_COND_GER] [nvarchar](250) NULL,
	[DT_REFUS_COND_GER] [nvarchar](250) NULL,
	[NO_INTN] [nvarchar](250) NULL,
	[PROF_ECLI] [nvarchar](250) NULL,
	[CD_SS_SERV] [nvarchar](250) NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[TYP_CONX] [nvarchar](250) NULL,
	[ID_CONX] [nvarchar](250) NULL,
	[UUID_BLOOM] [nvarchar](250) NULL,
	[CD_CAISSIER] [nvarchar](250) NULL,
	[ID_CAIS] [nvarchar](250) NULL,
	[FACT_FACTU] [nvarchar](250) NULL,
	[PRT_ONLINE] [nvarchar](250) NULL,
	[PROF_S2I_BI] [nvarchar](250) NULL,
	[PROF_RECO] [nvarchar](250) NULL,
	[DT_DER_CONX_NOM] [nvarchar](250) NULL,
	[HR_DER_CONX_NOM] [nvarchar](250) NULL,
	[PROF_GED_XNET] [nvarchar](250) NULL,
	[ACCS_MSG_SECU_ES2I] [nvarchar](250) NULL,
	[F_ACPT_ALRT] [nvarchar](250) NULL,
	[DT_ACPT_ALRT] [nvarchar](250) NULL,
	[VER_COND_MOB] [nvarchar](250) NULL,
	[DT_ACCPT_MOB] [nvarchar](250) NULL,
	[DT_PRM_CONX_MOB] [nvarchar](250) NULL,
	[HR_PRM_CONX_MOB] [nvarchar](250) NULL,
	[DT_DER_CONX_MOB] [nvarchar](250) NULL,
	[HR_DER_CONX_MOB] [nvarchar](250) NULL,
	[ACCS_MOB] [nvarchar](250) NULL,
	[MD_CONFI_NOM] [nvarchar](250) NULL,
	[UTIL_CLE] [nvarchar](250) NULL,
	[DT_DER_CONX_S2I] [nvarchar](250) NULL,
	[ASSIST_RESP_CPTE] [nvarchar](250) NULL,
	[NIV_SIGN_PAP] [nvarchar](250) NULL,
	[PROF_CAT] [nvarchar](250) NULL,
	[VER_CGU_AGREG] [nvarchar](250) NULL,
	[DT_ACPT_AGREG] [nvarchar](250) NULL,
	[CD_IUG] [nvarchar](250) NULL,
	[FL_ACCS_MOB_AUT] [nvarchar](250) NULL,
	[CD_AUTR_DEMCR] [nvarchar](250) NULL,
	[ROLE] [nvarchar](250) NULL,
	[DT_DEB_PER_MIG_HID] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Source_User] PRIMARY KEY CLUSTERED 
(
	[USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AccessRight](
	[PrimaryCode] [varchar](100) NULL,
	[C_STAT] [nvarchar](250) NULL,
	[D_MUTA] [nvarchar](250) NULL,
	[N_TIME] [nvarchar](250) NULL,
	[C_USER] [nvarchar](250) NULL,
	[C_PROG] [nvarchar](250) NULL,
	[C_SI] [nvarchar](20) NULL,
	[C_USERID] [nvarchar](50) NULL,
	[C_TYPE_INFO] [nvarchar](20) NULL,
	[C_TYPE_ACT] [nvarchar](20) NULL,
	[C_SEQ_SECU] [nvarchar](20) NULL,
	[T_CRIT1] [nvarchar](50) NULL,
	[T_CRIT2] [nvarchar](50) NULL,
	[T_NOM_DEB] [nvarchar](250) NULL,
	[LIB_40] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_AccessRight ON BatchLoad_Source_AccessRight (C_SI, C_USERID, C_TYPE_INFO, C_TYPE_ACT, C_SEQ_SECU, T_CRIT1, T_CRIT2)
GO

CREATE TABLE [dbo].[BatchLoad_Source_Service](
	[PrimaryCode] [varchar](100) NULL,
	[SERV_T067] [nvarchar](50) NOT NULL,
	[LIB_40] [nvarchar](250) NULL,
	[LIB_20] [nvarchar](250) NULL,
	[SIEGE] [nvarchar](250) NULL,
	[SERV_NLCL] [nvarchar](250) NULL,
	[SERV_NUM] [nvarchar](250) NULL,
	[PCTR] [nvarchar](250) NULL,
	[DT_MUT] [nvarchar](250) NULL,
	[PERS_MUT] [nvarchar](250) NULL,
	[SERV_LCL] [nvarchar](250) NULL,
	[DEP_OU_SERV] [nvarchar](250) NULL,
	[RESP_SERV] [nvarchar](250) NULL,
	[PERS_VISA_BASE] [nvarchar](250) NULL,
	[PERS_VISA_3_BASE] [nvarchar](250) NULL,
	[PERS_VISA_4_BASE] [nvarchar](250) NULL,
	[WCF_FILLER] [nvarchar](250) NULL,
	[RESP_SUIV] [nvarchar](250) NULL,
	[EXON_VISA_ADMIN] [nvarchar](250) NULL,
	[EXON_VISA_PERS] [nvarchar](250) NULL,
	[UNT_BUDG_INVG] [nvarchar](250) NULL,
	[PERS_VISA_ADM] [nvarchar](250) NULL,
	[CD_FG] [nvarchar](250) NULL,
	[CD_ACC_CI] [nvarchar](250) NULL,
	[PROF_ACCS_DON] [nvarchar](250) NULL,
	[CD_ACCS_CPTE_B] [nvarchar](250) NULL,
	[PERS_VISA_DISPO] [nvarchar](250) NULL,
	[ANA_CR] [nvarchar](250) NULL,
	[PERS_VISA_GESD] [nvarchar](250) NULL,
	[PRT_DEFAUT] [nvarchar](250) NULL,
	[PERS_REMP_VISA_RS] [nvarchar](250) NULL,
	[PERS_REMP_VISA_RZ] [nvarchar](250) NULL,
	[SERV_VISA_CPTE_INT] [nvarchar](250) NULL,
	[SEUIL_CHG_INDUIT_DVL] [nvarchar](250) NULL,
	[TYP_CTRL_CHG_INDUIT] [nvarchar](250) NULL,
	[AGNC] [nvarchar](250) NULL,
	[CD_CAPBS] [nvarchar](250) NULL,
	[SERV_EMTR_CNCT] [nvarchar](250) NULL,
	[RESP_RDT] [nvarchar](250) NULL,
	[FILLER_01] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Source_Service] PRIMARY KEY CLUSTERED 
(
	[SERV_T067] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


CREATE VIEW [dbo].[v_BatchLoad_Security_User]
AS

SELECT 
	a.UserPrimaryCode,
	a.UserId,
	a.FirstName,
	a.LastName,
	a.CF30,
	a.UserName,
	a.BusinessUnitPrimaryCode,
	a.ServiceCode,
	a.ServiceName,
	a.DepOuServ,
	a.DepartmentCode,
	a.DepartmentName,
	MAX(a.Grade) as Grade,
	a.Language,
	a.TransactionProfile
FROM (
	SELECT 
		u.PERS_T154 AS UserPrimaryCode, 

		u.USER_ID AS UserId,

		-- Where a comma is present take all characters AFTER the comma else LIB_40
		CASE WHEN u.LIB_40 LIKE '%,%' THEN ltrim(rtrim(RIGHT(u.LIB_40, CHARINDEX(',', REVERSE(u.LIB_40)) - 1))) ELSE u.LIB_40 END AS FirstName, 

		-- Where a comma is present take all characters BEFORE the comma else LIB_40
		CASE WHEN u.LIB_40 LIKE '%,%' THEN ltrim(rtrim(LEFT(u.LIB_40, CHARINDEX(',', u.LIB_40) - 1))) ELSE u.LIB_40 END AS LastName, 
		
		-- If INDC_RESP_CPTE = O then Y else N
		IIF(u.INDC_RESP_CPTE = 'O', 'Y', 'N') AS 'CF30', 

		-- Use UserNameTemplate setting to get the username, fallback to BI123@ads2i.ch.pbk
		CASE 
			WHEN EXISTS (SELECT [Value] FROM BatchLoad_Setting WHERE [Name] = 'UserNameTemplate') THEN 
				(SELECT REPLACE([Value], '__USER_ID__', u.[USER_ID]) FROM BatchLoad_Setting WHERE [Name] = 'UserNameTemplate')
			ELSE 'BI' + u.[USER_ID] + '@ads2i.ch.pbk'
		END AS UserName, 

		-- If user is in 'S' Service then WDX1 else Department
		CASE WHEN t.DEP_OU_SERV = 'S' THEN 'WDX1' ELSE jt.GTB_CDE + '_DEPARTMENT' END AS BusinessUnitPrimaryCode,

		t.DEP_OU_SERV AS DepOuServ,

		-- When a grade can be found from AccessRights via user link or via Service link else blank and use T_CRIT1 from rows where C_TYPE_INFO equals PO
		ISNULL(CASE WHEN ttad.T_CRIT1 IS NULL THEN utad.T_CRIT1 ELSE ttad.T_CRIT1 END, '') AS Grade,

		u.CD_LNG AS Language,

		t.SERV_T067 AS ServiceCode,
		t.LIB_40 AS ServiceName,
		jt.GTB_CDE AS DepartmentCode,
		jt.GTB_DES AS DepartmentName,

		u.PROF_TRAN AS TransactionProfile

	FROM BatchLoad_Source_User u 
		JOIN BatchLoad_Source_Service t -- S2i Services (Teams)
			ON u.CD_SERV = t .SERV_T067 
		LEFT OUTER JOIN BatchLoad_Source_Department jt -- S2i Departments
			ON t .SERV_LCL = jt.GTB_CDE
		LEFT OUTER JOIN (
			SELECT C_USERID, T_CRIT1
			FROM BatchLoad_Source_AccessRight -- Join via S2i Services
			WHERE C_TYPE_INFO = 'PO') ttad 
				ON t .PROF_ACCS_DON = ttad.C_USERID 
		LEFT OUTER JOIN (
			SELECT C_USERID, T_CRIT1
			FROM BatchLoad_Source_AccessRight -- Join via S2i Users
			WHERE C_TYPE_INFO = 'PO') utad 
				ON u.[USER_ID] = utad.[C_USERID]
	WHERE u.TYP_USER IN ('V', 'U')
) a

WHERE a.BusinessUnitPrimaryCode IS NOT NULL
GROUP BY 
	a.UserPrimaryCode,
	a.UserId,
	a.LastName,
	a.FirstName,
	a.CF30,
	a.UserName,
	a.BusinessUnitPrimaryCode,
	a.ServiceCode,
	a.ServiceName,
	a.DepOuServ,
	a.DepartmentCode,
	a.DepartmentName,
	a.TransactionProfile,
	a.Language
GO

CREATE TABLE [dbo].[BatchLoad_SpecialTeams](
	[S2iServiceCode] [nvarchar](250) NULL,
	[S2iServiceName] [nvarchar](250) NULL,
	[S2iProfileCode] [nvarchar](250) NULL,
	[WDXTeamPrimaryCode] [nvarchar](250) NULL,
	[WDXTeamName] [nvarchar](250) NULL,
	[Roles] [nvarchar](250) NULL,
	[Teams] [nvarchar](250) NULL,
	[ManualTeamMemberships] [bit] NULL,
	[TeamRoles] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Segment](
	[PrimaryCode] [varchar](100) NULL,
	[GTB_TYP] [nvarchar](250) NULL,
	[GTB_CDE] [nvarchar](50) NOT NULL,
	[GTB_DES] [nvarchar](250) NULL,
	[GTB_SRT_DES] [nvarchar](250) NULL,
	[GTB_FLG_1] [nvarchar](250) NULL,
	[GTB_FLG_2] [nvarchar](250) NULL,
	[GTB_CDE_1] [nvarchar](250) NULL,
	[GTB_CDE_2] [nvarchar](250) NULL,
	[GTB_USER] [nvarchar](250) NULL,
	[GTB_DTE_CHG] [nvarchar](250) NULL,
	[GTB_VER_NBR] [nvarchar](250) NULL,
	[GTB_OTR_INF] [nvarchar](250) NULL,
	[GTB_CDE_3] [nvarchar](250) NULL,
	[GTB_CDE_4] [nvarchar](250) NULL,
	[GTB_CDE_5] [nvarchar](250) NULL,
	[MOVES_CACHE_OPT] [nvarchar](250) NULL,
	[MOVES_CACHE_DURATION] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Source_Segment] PRIMARY KEY CLUSTERED 
(
	[GTB_CDE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_SecurityException](
	[C_TYPE_INFO] [nvarchar](50) NOT NULL,
	[C_SI] [nvarchar](50) NOT NULL,
	[C_USERID] [nvarchar](50) NOT NULL,
	[T_CRIT1] [nvarchar](50) NOT NULL,
	[T_CRIT2] [nvarchar](50) NOT NULL,
	[RangeSize] [int] NULL,
    [IsUserExplicit] BIT           CONSTRAINT [DF_BatchLoad_Source_SecurityException_IsExplicit] DEFAULT ((0)) NULL,
 CONSTRAINT [PK_BatchLoad_Source_SecurityException] PRIMARY KEY CLUSTERED 
(
	[C_TYPE_INFO] ASC,
	[C_SI] ASC,
	[C_USERID] ASC,
	[T_CRIT1] ASC,
	[T_CRIT2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


CREATE VIEW [dbo].[v_BatchLoad_Security_UserRole]
AS

SELECT 
	u.UserPrimaryCode,
	u.UserId,
	u.FirstName,
	u.LastName,
	u.UserName,
	u.BusinessUnitPrimaryCode,
	u.Grade,
	roles.RoleName
FROM (

	-- Profile team
	SELECT
		DISTINCT UserId,
		st.Roles AS RoleName
	FROM v_BatchLoad_Security_User u
		JOIN BatchLoad_SpecialTeams st
			ON u.TransactionProfile = st.S2iProfileCode

	UNION

	-- Special team
	SELECT
		DISTINCT UserId,
		st.Roles AS RoleName
	FROM v_BatchLoad_Security_User u
		JOIN BatchLoad_SpecialTeams st
			ON u.ServiceCode = st.S2iServiceCode

	UNION

	-- 'S' Service and no security exceptions and not a special team
	SELECT
		DISTINCT UserId,
		'Operations' AS RoleName
	FROM v_BatchLoad_Security_User u
		LEFT OUTER JOIN BatchLoad_SpecialTeams st
			ON u.ServiceCode = st.S2iServiceCode
		LEFT OUTER JOIN BatchLoad_Source_SecurityException se
			ON se.C_USERID = u.UserId
	WHERE u.DepOuServ = 'S'
	AND st.Roles IS NULL
	AND se.C_USERID IS NULL

	UNION

	-- 'D' Service and at least one segment
	SELECT
		u.UserId,
		'Private Banker' AS RoleName
	FROM v_BatchLoad_Security_User u
		JOIN BatchLoad_Source_Department d
			ON u.DepartmentCode = d.GTB_CDE
	WHERE u.DepOuServ = 'D'
	GROUP BY
		u.UserId

	UNION

	-- Everyone get Default User
	SELECT
		u.UserId,
		'Default User' AS RoleName
	FROM v_BatchLoad_Security_User u

	UNION

	-- Everyone get Portal User
	SELECT
		u.UserId,
		'Portal User' AS RoleName
	FROM v_BatchLoad_Security_User u

) roles
	JOIN dbo.v_BatchLoad_Security_User u 
		ON roles.UserId = u.UserId

GO

CREATE VIEW [dbo].[v_BatchLoad_Security_ProfileUser]
AS

SELECT TOP (10000)
	p.ProfileCode,
	u.UserPrimaryCode,
	u.UserId,
	u.FirstName,
	u.LastName,
	u.UserName
FROM
(
	-- Profiles that start with !..
	SELECT 
		t.C_USERID AS ProfileCode,
		u.[USER_ID] as UserId
	FROM BatchLoad_Source_AccessRight t
		JOIN BatchLoad_Source_Service s
			ON t.C_USERID = s.PROF_ACCS_DON
		JOIN BatchLoad_Source_User u
			ON s.SERV_T067 = u.CD_SERV
	WHERE t.C_USERID LIKE '!%'
	GROUP BY 
		t.C_USERID,
		u.[USER_ID]

	UNION

	-- Profiles that start with $..
	SELECT 
		t.C_USERID AS ProfileCode,
		u.[USER_ID] as UserId
	FROM BatchLoad_Source_AccessRight t
		JOIN BatchLoad_Source_User u
			ON t.C_USERID = u.PROF_STD
	WHERE t.C_USERID LIKE '$%'
	GROUP BY 
		t.C_USERID,
		u.[USER_ID]


) p
JOIN v_BatchLoad_Security_User u
	ON p.UserId = u.UserId

ORDER BY 
	p.ProfileCode,
	u.FirstName,
	u.LastName
	
GO

CREATE TABLE [dbo].[BatchLoad_Source_FormalPower](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[FormalPowerId] [nvarchar](250) NULL,
	[MainBusinessRelationshipId] [nvarchar](100) NULL,
	[ConnectionRoleId] [nvarchar](250) NULL,
	[BusinessRelationshipId] [nvarchar](250) NULL,
	[RoleTypeCode] [nvarchar](250) NULL,
	[SequenceNumber] [nvarchar](250) NULL,
	[PartyId] [nvarchar](100) NULL,
	[No_Op] [nvarchar](250) NULL,
	[RequiresKnowledge] [nvarchar](250) NULL,
	[ParticipationRate] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](100) NULL,
	[SignatureType] [nvarchar](250) NULL,
	[SignatureComment] [nvarchar](250) NULL,
	[CapitalRate] [nvarchar](250) NULL,
	[RevenueRate] [nvarchar](250) NULL,
	[VoteRate] [nvarchar](250) NULL,
	[PartyRoleCode] [nvarchar](100) NULL,
	[IndvPauvre] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPower_BusinessRelationshipId_PartyId ON BatchLoad_Source_FormalPower (BusinessRelationshipId, PartyId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPower_PrimaryCode ON BatchLoad_Source_FormalPower (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPower_MainBusinessRelationshipId ON BatchLoad_Source_FormalPower (MainBusinessRelationshipId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPower_StatusCode ON BatchLoad_Source_FormalPower (StatusCode, MainBusinessRelationshipId, PartyId, RoleTypeCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPower_PartyId ON BatchLoad_Source_FormalPower (PartyId) INCLUDE (MainBusinessRelationshipId)
GO

CREATE TABLE [dbo].[BatchLoad_Source_FormalPowerFile](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[FormalPowerId] [nvarchar](250) NULL,
	[MainBusinessRelationshipId] [nvarchar](100) NULL,
	[ConnectionRoleId] [nvarchar](250) NULL,
	[BusinessRelationshipId] [nvarchar](250) NULL,
	[RoleTypeCode] [nvarchar](250) NULL,
	[SequenceNumber] [nvarchar](250) NULL,
	[PartyId] [nvarchar](100) NULL,
	[No_Op] [nvarchar](250) NULL,
	[RequiresKnowledge] [nvarchar](250) NULL,
	[ParticipationRate] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](100) NULL,
	[SignatureType] [nvarchar](250) NULL,
	[SignatureComment] [nvarchar](250) NULL,
	[CapitalRate] [nvarchar](250) NULL,
	[RevenueRate] [nvarchar](250) NULL,
	[VoteRate] [nvarchar](250) NULL,
	[PartyRoleCode] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPowerFile_PrimaryCode ON BatchLoad_Source_FormalPowerFile (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPowerFile_BusinessRelationshipId_PartyId ON BatchLoad_Source_FormalPowerFile (BusinessRelationshipId, PartyId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPowerFile_MainBusinessRelationshipId ON BatchLoad_Source_FormalPowerFile (MainBusinessRelationshipId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPowerFile_PartyId ON BatchLoad_Source_FormalPowerFile (PartyId) INCLUDE (MainBusinessRelationshipId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_FormalPowerFile_StatusCode ON BatchLoad_Source_FormalPowerFile (StatusCode, MainBusinessRelationshipId, PartyId, RoleTypeCode)
GO

CREATE TABLE [dbo].[BatchLoad_Source_InformalPower](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[partyAssociationId] [nvarchar](250) NULL,
	[no_indv_1] [nvarchar](250) NULL,
	[no_indv_2] [nvarchar](250) NULL,
	[typ_rel] [nvarchar](250) NULL,
	[dt_ouv] [nvarchar](250) NULL,
	[cd_etat] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[dt_clo] [nvarchar](250) NULL,
	[pers_ouv] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[pers_clo] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Organisation](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[PartyId] [nvarchar](250) NULL,
	[Version] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[InvestorProfile] [nvarchar](250) NULL,
	[FatcaStatusCode] [nvarchar](250) NULL,
	[FatcaFormTypeCode] [nvarchar](250) NULL,
	[CrsStatusCode] [nvarchar](250) NULL,
	[CrsFormTypeCode] [nvarchar](250) NULL,
	[RiskLevel] [nvarchar](250) NULL,
	[RiskLevelNetreveal] [nvarchar](250) NULL,
	[PotentialRevenueCreationDate] [nvarchar](250) NULL,
	[PotentialRevenue] [nvarchar](250) NULL,
	[TaxResidenceCountryCode] [nvarchar](250) NULL,
	[ContactFrequencyReferencePeriodWM] [nvarchar](250) NULL,
	[LastContactDateWM] [nvarchar](250) NULL,
	[CurrentPeriodContactNumberWM] [nvarchar](250) NULL,
	[WishedContactFrequencyWM] [nvarchar](250) NULL,
	[ContactFrequencyReferencePeriodAdvisory] [nvarchar](250) NULL,
	[LastContactDateAdvisory] [nvarchar](250) NULL,
	[CurrentPeriodContactNumberAdvisory] [nvarchar](250) NULL,
	[WishedContactFrequencyAdvisory] [nvarchar](250) NULL,
	[SubTypeCode] [nvarchar](250) NULL,
	[Name] [nvarchar](250) NULL,
	[CoreBusiness] [nvarchar](250) NULL,
	[ListedCompany] [nvarchar](250) NULL,
	[EmployeesNumber] [nvarchar](250) NULL,
	[LegalEntityIdentifier] [nvarchar](250) NULL,
	[LegalEntityIdentifierExpiryDate] [nvarchar](250) NULL,
	[RegistrationDate] [nvarchar](250) NULL,
	[NationalIdentifier] [nvarchar](250) NULL,
	[RegistrationCountryId] [nvarchar](250) NULL,
	[BalanceAmount] [nvarchar](250) NULL,
	[BalanceYear] [nvarchar](250) NULL,
	[TypeofStructure] [nvarchar](250) NULL,
	[GroupsofFATCACategories] [nvarchar](250) NULL,
	[SubGroupsofFATCACategories] [nvarchar](250) NULL,
	[FATCACategories] [nvarchar](250) NULL,
	[SpecialTaxRuleCode] [nvarchar](250) NULL,
	[UKRND] [nvarchar](250) NULL,
	[USTIN] [nvarchar](100) NULL,
	[GIIN] [nvarchar](100) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[IndvPauvre] [nvarchar](250) NULL,
    [FircoOnlineId] [nvarchar](250) NULL,
	[BankEmployeeName] [nvarchar](250) NULL,
	[BankEmployeeTrigram] [nvarchar](250) NULL,
	[InternationalCommercialActivities] [nvarchar](250) NULL,
	[StructureComplexity] [nvarchar](250) NULL,
	[BusinessActivitySectorCode2] [nvarchar](250) NULL,
	[BusinessActivitySectorCode3] [nvarchar](250) NULL,
	[OnboardingMethod][nvarchar](250) NULL,
	[AccountOpeningChannel][nvarchar](250) NULL,
	[ResidenceCountryCode] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Person](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[PartyId] [nvarchar](250) NULL,
	[Version] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[InvestorProfile] [nvarchar](250) NULL,
	[FatcaStatusCode] [nvarchar](250) NULL,
	[FatcaFormTypeCode] [nvarchar](250) NULL,
	[CrsStatusCode] [nvarchar](250) NULL,
	[CrsFormTypeCode] [nvarchar](250) NULL,
	[RiskLevel] [nvarchar](250) NULL,
	[RiskLevelNetreveal] [nvarchar](250) NULL,
	[PotentialRevenueCreationDate] [nvarchar](250) NULL,
	[PotentialRevenue] [nvarchar](250) NULL,
	[TaxResidenceCountryCode] [nvarchar](250) NULL,
	[ContactFrequencyReferencePeriodWM] [nvarchar](250) NULL,
	[LastContactDateWM] [nvarchar](250) NULL,
	[CurrentPeriodContactNumberWM] [nvarchar](250) NULL,
	[WishedContactFrequencyWM] [nvarchar](250) NULL,
	[ContactFrequencyReferencePeriodAdvisory] [nvarchar](250) NULL,
	[LastContactDateAdvisory] [nvarchar](250) NULL,
	[CurrentPeriodContactNumberAdvisory] [nvarchar](250) NULL,
	[WishedContactFrequencyAdvisory] [nvarchar](250) NULL,
	[IdDocumentAuthority] [nvarchar](250) NULL,
	[MiddleName] [nvarchar](250) NULL,
	[MifidCategory] [nvarchar](250) NULL,
	[ProfessionalActivityNatureCode] [nvarchar](250) NULL,
	[TitleCode] [nvarchar](250) NULL,
	[IdDocumentIssueComment] [nvarchar](250) NULL,
	[SocioProfessionalCategory] [nvarchar](250) NULL,
	[ProfessionalActivitySectorCode] [nvarchar](250) NULL,
	[DeathDate] [nvarchar](250) NULL,
	[IdDocumentIssueDate] [nvarchar](250) NULL,
	[BirthDate] [nvarchar](250) NULL,
	[EstimatedWealthCreationDate] [nvarchar](250) NULL,
	[CivilStatusCode] [nvarchar](250) NULL,
	[ProfessionalActivityFunctionCode] [nvarchar](250) NULL,
	[EbankingFlag] [nvarchar](250) NULL,
	[EbankingLastLoginDate] [nvarchar](250) NULL,
	[PEP] [nvarchar](250) NULL,
	[SensitiveMarkets] [nvarchar](250) NULL,
	[UnderSurveliance] [nvarchar](250) NULL,
	[Vulnerability] [nvarchar](250) NULL,
	[LastName] [nvarchar](250) NULL,
	[IdDocumentPlaceOfIssue] [nvarchar](250) NULL,
	[BirthCity] [nvarchar](250) NULL,
	[NationalityCountrycode1] [nvarchar](250) NULL,
	[NationalityCountrycode2] [nvarchar](250) NULL,
	[NationalityCountrycode3] [nvarchar](250) NULL,
	[NationalityCountrycode4] [nvarchar](250) NULL,
	[DependentsNumber] [nvarchar](250) NULL,
	[IdDocumentNumber] [nvarchar](250) NULL,
	[CivilStatusCountryCode] [nvarchar](250) NULL,
	[BirthCountryCode] [nvarchar](250) NULL,
	[ResidenceCountryCode] [nvarchar](250) NULL,
	[FirstName] [nvarchar](250) NULL,
	[EstimatedWealth] [nvarchar](250) NULL,
	[MatrimonialRegimeCode] [nvarchar](250) NULL,
	[GenderCode] [nvarchar](250) NULL,
	[IdDocumentType] [nvarchar](250) NULL,
	[GroupsofFATCACategories] [nvarchar](250) NULL,
	[SubGroupsofFATCACategories] [nvarchar](250) NULL,
	[FATCACategories] [nvarchar](250) NULL,
	[SpecialTaxRuleCode] [nvarchar](250) NULL,
	[BirthName] [nvarchar](100) NULL,
	[BirthDept] [nvarchar](250) NULL,
	[CivilStatusFrom] [nvarchar](250) NULL,
	[UKRND] [nvarchar](250) NULL,
	[USTIN] [nvarchar](100) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[MifPersonId] [nvarchar](100) NULL,
    [IndvPauvre] [nvarchar](250) NULL,
	[TypesOfNationalIdentificationNumber] [nvarchar](250) NULL,
	[FircoOnlineId] [nvarchar](250) NULL,
	[BankEmployeeName] [nvarchar](250) NULL,
	[BankEmployeeTrigram] [nvarchar](250) NULL,
	[ProfessionalPrivatePerson] [nvarchar](250) NULL,
	[SensitiveFunctions] [nvarchar](250) NULL,
	[SpecifySensitiveFunctions] [nvarchar](250) NULL,
	[ForcedVulnerability] [nvarchar](250) NULL,
	[ForcedVulnerabilityDescription] [nvarchar](250) NULL,
	[ProfessionalActivitySectorCode2] [nvarchar](250) NULL,
	[ProfessionalActivitySectorCode3] [nvarchar](250) NULL,
	[ProfessionalActivityFunctionCode2] [nvarchar](250) NULL,
	[ProfessionalActivityFunctionCode3] [nvarchar](250) NULL,
	[OnboardingMethod][nvarchar](250) NULL,
	[AccountOpeningChannel][nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_PersonBankerSegment](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[PartyId] [nvarchar](250) NULL,
	[Banker] [nvarchar](250) NULL,
	[Segment] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_CommercialGroupMember](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[CommercialGroupId] [nvarchar](250) NULL,
	[Version] [nvarchar](250) NULL,
	[PartyId] [nvarchar](250) NULL,
	[IsPrimary] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AvqPerp](
	[PrimaryCode] nvarchar(100) NOT NULL,
	--Common
	AVPP_FUNCTIONALKEY nvarchar(100) NOT NULL,		--pcode
	AVPP_CRMINTRODUCER nvarchar(max) NULL,			--pcode, lookup
	AVPP_PREFCORRESPTYPE nvarchar(max) NULL,		--refdata
	AVPP_AMLRISKSCORE nvarchar(max) NULL,			--decimal
	AVPP_AMLRISKLEVEL nvarchar(max) NULL,			--picklist integer
	AVPP_AMLVALIDRISKLEVEL nvarchar(max) NULL,		--picklist integer
	AVPP_JUSTIFAMLVALIDRISKS nvarchar(max) NULL,	--text
	AVPP_CLIENTINTROTYPE nvarchar(max) NULL,		--refdata
	AVPP_KEYNOTE nvarchar(max) NULL,				--text
	AVPP_ALIAS nvarchar(max) NULL,					--text
	AVPP_REPUTATIONCHECKS nvarchar(max) NULL,		--text
	AVPP_SANCTIONEMBARGO nvarchar(max) NULL,		--refdata
	AVPP_COMPLIANCEINCIDENT nvarchar(max) NULL,		--refdata
	AVPP_ADVERSEINFORMATION nvarchar(max) NULL,		--refdata
	AVPP_POSITIVENEWSDETAILS nvarchar(max) NULL,	--text
	AVPP_ADVERSENEWSDETAILS nvarchar(max) NULL,		--text
	AVPP_SPECIFICUBOSIMULATI nvarchar(max) NULL,	--picklist integer
	AVPP_REMOTECONTACT nvarchar(max) NULL,			--refdata
	AVPP_COMPLEXORRISKYTRANS nvarchar(max) NULL,	--picklist integer
	AVPP_RELATIONOTHERSGPBVA nvarchar(max) NULL,	--text
	AVPP_RELATIONOTHERBUSLIN nvarchar(max) NULL,	--text
	AVPP_OTHERBANKSRELATIONS nvarchar(max) NULL,	--text
	AVPP_EXPECTEDASSETS1YEAR nvarchar(max) NULL,	--picklist integer
	AVPP_BANKPROD_PRODKEY_01 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_02 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_03 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_04 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_05 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_06 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_07 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_08 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_09 nvarchar(max) NULL,	--refdata
	AVPP_BANKPROD_PRODKEY_10 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_01 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_02 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_03 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_04 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_05 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_06 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_07 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_08 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_09 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_10 nvarchar(max) NULL,	--refdata
	AVPP_BANKSERV_SERVKEY_11 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHSTEMSRC_1 nvarchar(max) NULL, --pcode, lookup
	AVPP_WEALTHSTEMSRC_2 nvarchar(max) NULL, --pcode, lookup
	AVPP_WEALTHSTEMSRC_3 nvarchar(max) NULL, --pcode, lookup
	AVPP_WEALTHSTEMSRC_4 nvarchar(max) NULL, --pcode, lookup
	AVPP_WEALTHSTEMSRC_5 nvarchar(max) NULL, --pcode, lookup
	AVPP_REASONFORREFUSAL nvarchar(max) NULL,    --text
	AVPP_HASOTHERNATIONALITIES nvarchar(max) NULL, 
	--Individual specific
	AVPP_PROFESSION nvarchar(max) NULL,				--refdata
	AVPP_BUSINESSACTIVITY nvarchar(max) NULL,		--refdata
	AVPP_BUSINESSACTIVITYLV2 nvarchar(max) NULL,	--refdata
	AVPP_BUSACTIVSECTOR2LEV1 nvarchar(max) NULL,	--refdata
	AVPP_BUSACTIVSECTOR2LEV2 nvarchar(max) NULL,	--refdata
	AVPP_BUSACTIVITYDETAILS nvarchar(max) NULL,		--text
	AVPP_ANNUALINCOME nvarchar(max) NULL,			--refdata
	AVPP_TOTALESTIMATEDWEALT nvarchar(max) NULL,	--picklist integer
	AVPP_LANGUAGE nvarchar(max) NULL,				--ISO code TODO: check in CRM
	AVPP_OTHERLANGUAGE_1 nvarchar(max) NULL,		--ISO code TODO: check in CRM
	AVPP_DEPENDENTSNUMBER nvarchar(max) NULL,		--integer
	AVPP_AMLVALIDRISKLEVELAU nvarchar(max) NULL,	--picklist integer
	AVPP_AUTHSIGNED nvarchar(max) NULL,				--refdata
	AVPP_DEATHANNOUNCEMENTDA nvarchar(max) NULL,	--datetime
	AVPP_SOURCEOFDEATHANNOUN nvarchar(max) NULL,	--text
	AVPP_PEPFUNCTION nvarchar(max) NULL,			--refdata
	AVPP_PEPFUNCTIONSANDACTI nvarchar(max) NULL,	--text
	AVPP_RELATEDPEPRELDETAIL nvarchar(max) NULL,	--text
	AVPP_WEALTHCREATBUSSECTO nvarchar(max) NULL,	--refdata
	AVPP_WEALTHCREATBUSSECT2 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHCREATBUSSECT3 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHCREATBUSSECT4 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHCREATBUSSECT5 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHCREATBUSSECT6 nvarchar(max) NULL,	--refdata
	AVPP_WEALTHREFERENCECURR nvarchar(max) NULL,	--pcode, lookup
	AVPP_HOBBY1 nvarchar(max) NULL,					--pcode, lookup
	AVPP_NORMDOMNMB nvarchar(max) NULL,				--¯\_(ツ)_/¯
	AVPP_NATTRANSINFO nvarchar(max) NULL,			--¯\_(ツ)_/¯
	AVPP_NEG_TAX_CLASS1 nvarchar(max) NULL,			--refdata
	AVPP_SOURCEOFWEALTH_01 nvarchar(max) NULL,		--refdata
	AVPP_SOURCEOFWEALTH_02 nvarchar(max) NULL,		--refdata
	AVPP_SOURCEOFWEALTH_03 nvarchar(max) NULL,		--refdata
	AVPP_MEETINGDETAILS nvarchar(max) NULL, --text
	AVPP_PEPASSOCIATED nvarchar(max) NULL, -- refdata
	AVPP_TYPEOFINSIDER nvarchar(max) NULL, --refdata
	AVPP_INSIDERDETAILS nvarchar(max) NULL, --text
	AVPP_LEGAAVPPYINCAPACITE nvarchar(max) NULL,
	AVPP_PORTIONANNUALFINANCIALINC nvarchar(max) NULL,
	AVPP_FLAGABC nvarchar(max) NULL,
    AVPP_RULESABC nvarchar(max) NULL,
    AVPP_BRIBERYNEGATIVEINFO nvarchar(max) NULL,
	AVPP_PEP nvarchar(max) NULL

) ON [PRIMARY]
CREATE TABLE [dbo].[BatchLoad_Source_AvqPerm](
	[PrimaryCode] nvarchar(100) NOT NULL,
	--Common
	AVPM_FUNCTIONALKEY nvarchar(100) NOT NULL,		--pcode
	AVPM_CRMINTRODUCER nvarchar(max) NULL,			--pcode
	AVPM_PREFCORRESPTYPE nvarchar(max) NULL,		--refdata
	AVPM_AMLRISKSCORE nvarchar(max) NULL,			--decimal
	AVPM_AMLRISKLEVEL nvarchar(max) NULL,			--picklist integer
	AVPM_AMLVALIDRISKLEVEL nvarchar(max) NULL,		--picklist integer
	AVPM_JUSTIFAMLVALIDRISKS nvarchar(max) NULL,	--text
	AVPM_CLIENTINTROTYPE nvarchar(max) NULL,		--refdata
	AVPM_KEYNOTE nvarchar(max) NULL,				--text
	AVPM_ALIAS nvarchar(max) NULL,					--text
	AVPM_REPUTATIONCHECKS nvarchar(max) NULL,		--text
	AVPM_SANCTIONEMBARGO nvarchar(max) NULL,		--refdata
	AVPM_COMPLIANCEINCIDENT nvarchar(max) NULL,		--refdata
	AVPM_ADVERSEINFORMATION nvarchar(max) NULL,		--refdata
	AVPM_POSITIVENEWSDETAILS nvarchar(max) NULL,	--text
	AVPM_ADVERSENEWSDETAILS nvarchar(max) NULL,		--text
	AVPM_SPECIFICUBOSIMULATI nvarchar(max) NULL,	--picklist integer
	AVPM_REMOTECONTACT nvarchar(max) NULL,			--refdata
	AVPM_COMPLEXORRISKYTRANS nvarchar(max) NULL,	--picklist integer
	AVPM_RELATIONOTHERSGPBVA nvarchar(max) NULL,	--text
	AVPM_RELATIONOTHERBUSLIN nvarchar(max) NULL,	--text
	AVPM_OTHERBANKSRELATIONS nvarchar(max) NULL,	--text
	AVPM_EXPECTEDASSETS1YEAR nvarchar(max) NULL,	--picklist integer
	AVPM_BANKPROD_PRODKEY_01 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_02 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_03 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_04 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_05 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_06 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_07 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_08 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_09 nvarchar(max) NULL,	--refdata
	AVPM_BANKPROD_PRODKEY_10 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_01 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_02 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_03 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_04 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_05 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_06 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_07 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_08 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_09 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_10 nvarchar(max) NULL,	--refdata
	AVPM_BANKSERV_SERVKEY_11 nvarchar(max) NULL,	--refdata
	AVPM_REASONFORREFUSAL nvarchar(max) NULL,		--text
	AVPM_HASOTHERNATIONALITIES nvarchar(max) NULL,	
	AVPM_NATTRANSINFO nvarchar(max) NULL,	
	AVPM_NORMDOMNMB nvarchar(max) NULL,	
	AVPM_PEPASSOCIATED nvarchar(max) NULL,	
	--Organisation specific
	AVPM_MARKETSEGMENT nvarchar(max) NULL,			--refdata
	AVPM_VEHICLETYPE nvarchar(max) NULL,			--refdata
	AVPM_AMLVALIDRISKLEVAUTO nvarchar(max) NULL,	--picklist integer
	AVPM_MOSTRISKYUBOKEY nvarchar(max) NULL,		--pcode, lookup
	AVPM_ENTITYISSPONSORED nvarchar(max) NULL,		--picklist integer
	AVPM_SPONSORKEY nvarchar(max) NULL,				--refdata
	AVPM_PROFESSIONALTREASUR nvarchar(max) NULL,	--picklist integer
	AVPM_INDUSTRYSECTOR1LEVE nvarchar(max) NULL,	--refdata
	AVPM_INDUSTRYSECTOR1LEV2 nvarchar(max) NULL,	--refdata
	AVPM_INDUSTRYSECTOR2LEVE nvarchar(max) NULL,	--refdata
	AVPM_INDUSTRYSECTOR2LEV2 nvarchar(max) NULL,	--refdata
	AVPM_INDUSTRYSECTOR3LEVE nvarchar(max) NULL,	--refdata
	AVPM_INDUSTRYSECTOR3LEV2 nvarchar(max) NULL,	--refdata
	AVPM_TOTALBALANCESHEET nvarchar(max) NULL,		--decimal
	AVPM_TURNOVER nvarchar(max) NULL,				--decimal
	AVPM_ANNUALNETPROFIT nvarchar(max) NULL,		--decimal
	AVPM_ORGLANDOWNERSHIPSTR nvarchar(max) NULL,	--text
	AVPM_STRUCTINVOLVENOMINE nvarchar(max) NULL,	--refdata
	AVPM_MAXLEVELSBETWEENAOA nvarchar(max) NULL,	--refdata
	AVPM_STRUCTINVOLVEBEARER nvarchar(max) NULL,	--picklist integer
	AVPM_STRUCTINOWNREGISTER nvarchar(max) NULL,	--picklist integer
	AVPM_STRUCTINOWNREGOUTSE nvarchar(max) NULL,	--picklist integer
	AVPM_PURPOSEOFTRUST nvarchar(max) NULL,			--text
	AVPM_CLASSOFBENEFICIARIE nvarchar(max) NULL,	--text
	AVPM_MEETINGDETAILS nvarchar(max) NULL,			--text
	AVPM_ANNUALINCOME nvarchar(max) NULL,			--¯\_(ツ)_/¯
	AVPM_WEALTHCREATIONSECTO nvarchar(max) NULL,	--¯\_(ツ)_/¯
	AVPM_WEALTHCREATIONSECT2 nvarchar(max) NULL,		--¯\_(ツ)_/¯
	AVPM_FIMBI nvarchar(max) NULL,					--refdata
	AVPM_FIMTYPE nvarchar(max) NULL,				--refdata
	AVPM_LOCALREGULATORSOFFI nvarchar(max) NULL,	--refdata
	AVPM_LOCALREGULATORSOFF2 nvarchar(max) NULL,	--text
	AVPM_FINANICALFIGURECURR nvarchar(max) NULL,	-- lookup
	AVPM_NEG_TAX_CLASS_1 nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSECT nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSEC2 nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSEC3 nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSEC4 nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSEC5 nvarchar(max) NULL,
	AVPM_UBOWLTHCREATBUSSEC6 nvarchar(max) NULL,
	AVPM_TOTALESTIMATEDWEALT nvarchar(max) NULL,
	AVPM_COUNTRIESBUSISRUN_1 nvarchar(max) NULL,
	AVPM_COUNTRIESBUSISRUN_2 nvarchar(max) NULL,
	AVPM_COUNTRIESBUSISRUN_3 nvarchar(max) NULL,
	AVPM_COUNTRIESBUSISRUN_4 nvarchar(max) NULL,
	AVPM_COUNTRIESBUSISRUN_5 nvarchar(max) NULL,
	AVPM_LEGALCRSSTAT nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALTH nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT2 nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT3 nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT4 nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT5 nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT6 nvarchar(max) NULL,
	AVPM_UBOSOURCESOFWEALT7 nvarchar(max) NULL,
	AVPM_UBOWEALTHSTEMSRC_1 nvarchar(max) NULL, --pcode, lookup
	AVPM_UBOWEALTHSTEMSRC_2 nvarchar(max) NULL, --pcode, lookup
	AVPM_UBOWEALTHSTEMSRC_3 nvarchar(max) NULL, --pcode, lookup
	AVPM_UBOWEALTHSTEMSRC_4 nvarchar(max) NULL, --pcode, lookup
	AVPM_UBOWEALTHSTEMSRC_5 nvarchar(max) NULL, --pcode, lookup
	AVPM_PERSONSTATUS		nvarchar(max) NULL, --text
	AVPM_FLAGABC nvarchar(max) NULL, 
    AVPM_RULESABC nvarchar(max) NULL,
	AVPM_BRIBERYNEGATIVEINFO nvarchar(max) NULL, 
	AVPM_UBOBRIBERYNEGATIVEINFO nvarchar(max) NULL,
	AVPM_PEP nvarchar(max) NULL
) ON [PRIMARY]

CREATE TABLE [dbo].[BatchLoad_Source_AvqBP](
	[PrimaryCode] nvarchar(100) NOT NULL,
	AVBP_FUNCTIONALKEY nvarchar(100) NOT NULL,		--pcode
	AVBP_COMMERCIALSTATUS nvarchar(max) NULL,		--picklist integer
	AVBP_PEPACCOUNT nvarchar(max) NULL				--picklist integer
) ON [PRIMARY]

CREATE TABLE [dbo].[BatchLoad_Source_AvqCont](
	[PrimaryCode] nvarchar(100) NOT NULL,
	AVCONT_FUNCTIONALKEY nvarchar(100) NOT NULL,	--pcode
	AVCONT_PURPOSEOFACCOUNT nvarchar(max) NULL,		--text
	AVCONT_DATELASTQUESTIONN nvarchar(max) NULL,	--date
	AVCONT_INVESTMENTHORIZON nvarchar(max) NULL,	--lookup
	AVCONT_CAPACITYTOWITHSTA nvarchar(max) NULL,	--picklist integer
	AVCONT_SUSTAINABLEANNUAL nvarchar(max) NULL,	--picklist integer
	AVCONT_OBJECTIVE_01 nvarchar(max) NULL,			--lookup
	AVCONT_SPECIFICEXPECTAT nvarchar(max) NULL		--picklist integer
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQASSET](
    PrimaryCode nvarchar(100) NOT NULL,
	ASSETS_FUNCTIONALKEY nvarchar(100) NOT NULL,
    ASSETS_ASSETTYPE nvarchar(100) NULL,
    ASSETS_ASSETAMOUNT nvarchar(100) NULL
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQLIAB](
    PrimaryCode nvarchar(100) NOT NULL,
	LIAB_FUNCTIONALKEY nvarchar(100) NOT NULL,
    LIAB_LIABILITYTYPE nvarchar(100) NULL,
    LIAB_OUTSTANDINGAMOUNT nvarchar(100) NULL
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQINCOME](
    PrimaryCode nvarchar(100) NOT NULL,
	INCOME_FUNCTIONALKEY nvarchar(100) NOT NULL,
    INCOME_INCOMETYPE nvarchar(100) NULL,
    INCOME_INCOMEAMOUNT nvarchar(100) NULL
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQEXPENS](
    PrimaryCode nvarchar(100) NOT NULL,
	EXPENS_FUNCTIONALKEY nvarchar(100) NOT NULL,
    EXPENS_EXPENSETYPE nvarchar(100) NULL,
    EXPENS_EXPENSEAMOUNT nvarchar(100) NULL
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQSHARE](
    PrimaryCode nvarchar(100) NOT NULL,
	AVSH_FUNCTIONALKEY nvarchar(100) NOT NULL,
    AVSH_BEARERSHAREWHERE nvarchar(100) NULL,
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_AVQP2PREL](
    PrimaryCode nvarchar(100) NOT NULL,
	[AVP2P_SOURCE] nvarchar(100) NOT NULL,
	[AVP2P_TARGET] nvarchar(100) NOT NULL,
    AVP2P_SUBTYPE nvarchar(100) NULL,
) ON[PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_CountryAgreements](
	[PrimaryCode] nvarchar(100) NOT NULL,
	Signataire1 varchar(3) NULL,
	Signataire2 varchar(3) NULL,
	CrossBorderAgreementDate date NULL,
	AgreementExistsFlag char(1)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_EAI](
	[PrimaryCode] nvarchar(100) NOT NULL,
	PartyId nvarchar(100) NULL,
	CountryCode nvarchar(100) NULL,
	CreationDate date NULL,
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ContactsForCRSRecalc](
	[PrimaryCode] varchar(100) NOT NULL,
	[Id] varchar(100) NOT NULL --TODO: this should be a GUID but SqlBulkCopy doesn't like it - work out why and fix it!
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ProductAccountInvestorProfiling](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ProductAccountId] [nvarchar](100) NULL,
	[TargetMifidScore] [nvarchar](100) NULL,
	[MifidClientCategory] [nvarchar](100) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_AccountOwner_RoleType](
	[RoleType] [nvarchar](100) NOT NULL 
) ON [PRIMARY]
GO

CREATE VIEW [dbo].[v_BatchLoad_PartyBranch]
AS

SELECT
	party.PartyId,
	CASE WHEN o.PartyId IS NOT NULL THEN 'Organisation' ELSE 'Person' END AS LoaderName,
	Branch	
FROM (

	SELECT 
		PartyId,
		MainBusinessRelationshipId AS Branch
	FROM BatchLoad_Source_FormalPower

	UNION

	SELECT 
		no_indv_1,
		MainBusinessRelationshipId AS Branch
	FROM BatchLoad_Source_InformalPower ip
		JOIN BatchLoad_Source_FormalPower fp
			ON ip.no_indv_1 = fp.PartyId

	UNION

	SELECT 
		no_indv_1,
		MainBusinessRelationshipId AS Branch
	FROM BatchLoad_Source_InformalPower ip
		JOIN BatchLoad_Source_FormalPower fp
			ON ip.no_indv_2 = fp.PartyId

	UNION

	SELECT 
		no_indv_2,
		MainBusinessRelationshipId AS Branch
	FROM BatchLoad_Source_InformalPower ip
		JOIN BatchLoad_Source_FormalPower fp
			ON ip.no_indv_2 = fp.PartyId

	UNION

	SELECT 
		no_indv_2,
		MainBusinessRelationshipId AS Branch
	FROM BatchLoad_Source_InformalPower ip
		JOIN BatchLoad_Source_FormalPower fp
			ON ip.no_indv_1 = fp.PartyId

) party
	LEFT OUTER JOIN BatchLoad_Source_Person p
		ON party.PartyId = p.PartyId
	LEFT OUTER JOIN BatchLoad_Source_Organisation o
		ON party.PartyId = o.PartyId

GROUP BY
	party.PartyId,
	CASE WHEN o.PartyId IS NOT NULL THEN 'Organisation' ELSE 'Person' END,
	Branch

GO

CREATE TABLE [dbo].[BatchLoad_Mapping](
	[MappingType] [nvarchar](250) NOT NULL,
	[S2iValue] [nvarchar](50) NOT NULL,
	[S2iLabel] [nvarchar](250) NULL,
	[WDXValue] [nvarchar](50) NOT NULL,
	[WDXLabel] [nvarchar](250) NULL,
 CONSTRAINT [PK_BatchLoad_Mapping] PRIMARY KEY CLUSTERED 
(
	[MappingType] ASC,
	[S2iValue] ASC,
	[WDXValue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


CREATE VIEW [dbo].[v_BatchLoad_Security_Team]
AS

SELECT
	TeamPrimaryCode,
	TeamName,
	OwningBusinessUnitPrimaryCode
FROM
(
	-- Create one team for every S2i Segment (WDX Responsible Party)
	SELECT 
		s.GTB_CDE                   AS TeamPrimaryCode,
		s.GTB_DES + ' ' + s.GTB_CDE AS TeamName, -- Team names need to be unique
		d.GTB_CDE + '_DEPARTMENT'   AS OwningBusinessUnitPrimaryCode
	FROM BatchLoad_Source_Segment s -- S2i Segments 
		JOIN BatchLoad_Source_Department d -- S2i Departments
			ON LEFT(s.GTB_CDE_1, 4) = d.GTB_CDE

	UNION

	-- Create one team for every Service Type
	SELECT 
		m.WDXValue                   AS TeamPrimaryCode,
		m.WDXLabel + ' Service Type' AS TeamName,
		'WDX1'                       AS OwningBusinessUnitPrimaryCode
	FROM BatchLoad_Mapping m
	WHERE MappingType = '2'

	UNION

	-- Create one team for every 'S' service and overwrite primary code where needed
	SELECT 
		COALESCE(st.WDXTeamPrimaryCode, s.SERV_LCL) AS TeamPrimaryCode,
		s.LIB_40                                    AS TeamName,
		'WDX1'                                      AS OwningBusinessUnitPrimaryCode
	FROM BatchLoad_Source_Service s
		LEFT OUTER JOIN BatchLoad_SpecialTeams st
			ON s.SERV_T067 = st.S2iServiceCode
			AND COALESCE(st.WDXTeamPrimaryCode, '') <> ''
			AND COALESCE(st.S2iServiceCode, '') <> ''
	WHERE s.DEP_OU_SERV = 'S'


	UNION

	SELECT
		WDXTeamPrimaryCode AS TeamPrimaryCode,
		WDXTeamName AS TeamName,
		'WDX1' AS OwningBusinessUnitPrimaryCode
	FROM BatchLoad_SpecialTeams
	WHERE S2iServiceCode = ''

) T

GO


CREATE VIEW [dbo].[v_BatchLoad_Security_TeamRole]
AS

SELECT TeamPrimaryCode, TeamName, 'Default Team' AS RoleName
FROM v_BatchLoad_Security_Team
WHERE TeamPrimaryCode NOT IN (
	SELECT WDXTeamPrimaryCode FROM BatchLoad_SpecialTeams WHERE ISNULL(WDXTeamPrimaryCode, '') <> ''
)

UNION

SELECT t.TeamPrimaryCode, t.TeamName, st.TeamRoles AS RoleName
FROM v_BatchLoad_Security_Team t
	JOIN BatchLoad_SpecialTeams st
		ON t.TeamPrimaryCode = st.WDXTeamPrimaryCode
WHERE ISNULL(WDXTeamPrimaryCode, '') <> ''

GO


CREATE VIEW [dbo].[v_BatchLoad_Security_UserTeam]
AS

SELECT TOP(100000)
	u.UserPrimaryCode,
	u.UserId,
	u.FirstName,
	u.LastName,
	u.UserName,
	u.BusinessUnitPrimaryCode,
	u.Grade,
	teams.TeamPrimaryCode,
	teams.TeamName,
	min(teams.MembershipType) AS MembershipType
FROM
(
		-- Add to Service Team based on the User's Service
		SELECT 
			u.UserId,
			COALESCE(st.WDXTeamPrimaryCode, s.SERV_LCL) AS TeamPrimaryCode,
			s.LIB_40 AS TeamName,
			'01 Service Team' AS MembershipType
		FROM v_BatchLoad_Security_User u 
			JOIN BatchLoad_Source_Service s
				ON u.ServiceCode = s.SERV_T067
			LEFT OUTER JOIN BatchLoad_SpecialTeams st
				ON s.SERV_T067 = st.S2iServiceCode
				AND COALESCE(st.WDXTeamPrimaryCode, '') <> ''
				AND COALESCE(st.S2iServiceCode, '') <> ''
		WHERE s.DEP_OU_SERV = 'S'
		UNION
		SELECT 
			u.UserId,
			t.TeamPrimaryCode AS TeamPrimaryCode,
			t.TeamName AS TeamName,
			'02 Other Teams' AS MembershipType
		FROM v_BatchLoad_Security_User u
			JOIN BatchLoad_Source_Service s
				ON u.ServiceCode = s.SERV_T067
			JOIN BatchLoad_SpecialTeams st
				ON s.SERV_T067 = st.S2iServiceCode
				AND COALESCE(st.WDXTeamPrimaryCode, '') <> ''
				AND COALESCE(st.S2iServiceCode, '') <> ''
				AND COALESCE(st.Teams, '') <> ''
			JOIN v_BatchLoad_Security_Team t
				ON ',' + st.Teams + ',' LIKE '%,' + t.TeamPrimaryCode + ',%'

		
		UNION

		-- Add to Profile based Team based on the User's Transaction Profile
		SELECT 
			u.UserId,
			st.WDXTeamPrimaryCode AS TeamPrimaryCode,
			st.WDXTeamName AS TeamName,
			'03 Profile Team' AS MembershipType
		FROM v_BatchLoad_Security_User u 
			JOIN BatchLoad_SpecialTeams st
				ON u.TransactionProfile = st.S2iProfileCode
				AND COALESCE(st.WDXTeamPrimaryCode, '') <> ''
		UNION
		SELECT 
			u.UserId,
			t.TeamPrimaryCode AS TeamPrimaryCode,
			t.TeamName AS TeamName,
			'04 Other Teams' AS MembershipType
		FROM v_BatchLoad_Security_User u
			JOIN BatchLoad_SpecialTeams st
				ON u.TransactionProfile = st.S2iProfileCode
				AND COALESCE(st.WDXTeamPrimaryCode, '') <> ''
				AND COALESCE(st.Teams, '') <> ''
			JOIN v_BatchLoad_Security_Team t
				ON ',' + st.Teams + ',' LIKE '%,' + t.TeamPrimaryCode + ',%'


		UNION

		-- Add to every Segment based on the User's Service -> Department -> Segment
		SELECT 
			v.UserId,
			t.TeamPrimaryCode,
			t.TeamName,
			'05 Based on Default Department' AS MembershipType
		FROM v_BatchLoad_Security_User v 
			JOIN BatchLoad_Source_User u -- S2i Users
				ON v.UserId = u.[USER_ID]
			JOIN BatchLoad_Source_Service s -- S2i Services
				ON u.CD_SERV = s.SERV_T067
			JOIN BatchLoad_Source_Department d -- S2i Departments
				ON s.SERV_LCL = d.GTB_CDE
			JOIN BatchLoad_Source_Segment seg -- S2i Segments
				ON d.GTB_CDE = LEFT(seg.GTB_CDE_1, 4)
			JOIN v_BatchLoad_Security_Team t
				ON seg.GTB_CDE = t.TeamPrimaryCode 

		UNION
			
		-- DPT Exceptions (Department)
		SELECT
			u.UserId,
			t.TeamPrimaryCode,
			t.TeamName,
			'06 Based on Department Exception ' + CASE IsUserExplicit WHEN 1 THEN '(User)' ELSE '(Profile)' END AS MembershipType
		FROM BatchLoad_Source_SecurityException e
			JOIN BatchLoad_Source_Department d
				ON d.GTB_CDE BETWEEN e.T_CRIT1 AND e.T_CRIT2
			JOIN BatchLoad_Source_Segment s
				ON d.GTB_CDE = LEFT(s.GTB_CDE_1, 4)
			JOIN v_BatchLoad_Security_User u
				on e.C_USERID = u.UserId
			JOIN v_BatchLoad_Security_Team t
				ON s.GTB_CDE = t.TeamPrimaryCode
		WHERE C_TYPE_INFO = 'DPT'
		AND e.RangeSize <= 10

		UNION

		-- SIESE Exceptions (Segment)
		SELECT
			u.UserId,
			t.TeamPrimaryCode,
			t.TeamName,
			'07 Based on Segment Exception ' + CASE IsUserExplicit WHEN 1 THEN '(User)' ELSE '(Profile)' END AS MembershipType
		FROM BatchLoad_Source_SecurityException e
			JOIN BatchLoad_Source_Segment s
				ON s.GTB_CDE BETWEEN e.T_CRIT1 AND e.T_CRIT2
			JOIN v_BatchLoad_Security_User u
				on e.C_USERID = u.UserId
			JOIN v_BatchLoad_Security_Team t
				ON s.GTB_CDE = t.TeamPrimaryCode
		WHERE C_TYPE_INFO = 'SIESE'
		AND e.RangeSize <= 33

		UNION 

		-- ITGES and TYPGE Exceptions (Service Type)
		SELECT
			u.UserId,
			t.TeamPrimaryCode,
			t.TeamName,
			'08 Based on Service Type Exception ' + CASE IsUserExplicit WHEN 1 THEN '(User)' ELSE '(Profile)' END AS MembershipType
		FROM BatchLoad_Source_SecurityException e
			JOIN BatchLoad_Mapping m
				ON m.S2iValue BETWEEN e.T_CRIT1 AND e.T_CRIT2
			JOIN v_BatchLoad_Security_User u
				on e.C_USERID = u.UserId
			JOIN v_BatchLoad_Security_Team t
				ON m.WDXValue = t.TeamPrimaryCode
		WHERE (C_TYPE_INFO = 'ITGES' OR C_TYPE_INFO = 'TYPGE')
		AND e.RangeSize <= 10

		UNION

		-- All users to be in the Everyone team
		SELECT 
			[USER_ID]     AS UserId,
			'EVERYONE'    AS TeamPrimaryCode,
			'Everyone'    AS TeamName,
			'10 Everyone' AS MembershipType
		FROM BatchLoad_Source_User -- S2i Users

) teams
	JOIN v_BatchLoad_Security_User u
		ON teams.UserId = u.UserId

GROUP BY
	u.UserPrimaryCode,
	u.UserId,
	u.FirstName,
	u.LastName,
	u.UserName,
	u.BusinessUnitPrimaryCode,
	u.Grade,
	teams.TeamPrimaryCode,
	teams.TeamName

ORDER BY
	u.UserId,
	teams.TeamName
GO

CREATE VIEW [dbo].[v_BatchLoad_Security_ResponsibleParty]
AS

SELECT TOP(10000)
	ResponsiblePartyPrimaryCode,
	ResponsiblePartyName,
	OwningTeamPrimaryCode,
	CodeTwo,
	State
FROM
(
	-- One Responsible Party per S2i Segment
	SELECT 
		s.GTB_CDE   AS ResponsiblePartyPrimaryCode,
		s.GTB_DES + ' ' + s.GTB_CDE AS ResponsiblePartyName,
		s.GTB_CDE   AS OwningTeamPrimaryCode, -- We are expecting that every S2i Segment will have a WDX Team with the same Primary Code
		s.GTB_CDE_2 AS CodeTwo,
		s.GTB_FLG_2 AS State
	FROM dbo.BatchLoad_Source_Segment s -- S2i Segments

	UNION

	-- central_file
	SELECT
		WDXTeamPrimaryCode,
		S2iServiceName,
		WDXTeamPrimaryCode,
		'',
		''
	FROM BatchLoad_SpecialTeams
	WHERE WDXTeamPrimaryCode = 'central_file'	

) R

ORDER BY
	ResponsiblePartyPrimaryCode

GO

CREATE TABLE [dbo].[BatchLoad_Filter](
	[Branch] [nvarchar](100) NULL,
	[UserToExclude] [nvarchar](100) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Loader](
	[Name] [varchar](100) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[CompletedOn] [datetime] NULL,
	[LoadIntoHeapStatus] [varchar](100) NULL,
	[LoadedIntoHeap] [int] NOT NULL,
	[UnparseableRecordsNotLoadedIntoHeap] [int] NOT NULL,
	[CorruptedRecordsLoadedIntoHeap] [int] NOT NULL,
	[LoadIntoStagingStatus] [varchar](100) NULL,
	[ReadyForProcessingInStaging] [int] NOT NULL,
	[LoadIntoWdxStatus] [varchar](100) NULL,
	[LoadedIntoWdxSuccess] [int] NOT NULL,
	[LoadedIntoWdxError] [int] NOT NULL,
	[Trace] [nvarchar](max) NULL,
	[Id] [uniqueidentifier] NOT NULL,
	[OrchestratorId] [uniqueidentifier] NULL,
 CONSTRAINT [PK_BatchLoad_Loader] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Loader_Heap](
	[LoaderName] [varchar](100) NOT NULL,
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Record] [nvarchar](max) NOT NULL,
	[PrimaryFields] [nvarchar](max) NULL,
	[SecondaryFields] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Loader_Staging](
	[LoaderId] [uniqueidentifier] NOT NULL,
	[LoaderName] [varchar](100) NOT NULL,
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	[ModifiedOn] [datetime] NOT NULL,
	[DeletedOn] [datetime] NULL,
	[ProcessingOn] [datetime] NULL,
	[ProcessedOn] [datetime] NULL,
	[ProcessedStatus] [varchar](100) NULL,
	[ProcessedStatusDetails] [varchar](250) NULL,
	[ProcessedTrace] [nvarchar](max) NULL,
	[ProcessedBy] [uniqueidentifier] NULL,
	[Record] [nvarchar](max) NOT NULL,
	[Branch] [nvarchar](100) NULL,
	[PrimaryFields] [nvarchar](max) NULL,
	[SecondaryFields] [nvarchar](max) NULL,
	[Priority] [int] NOT NULL,
 CONSTRAINT [PK_BatchLoad_Loader_Staging] PRIMARY KEY CLUSTERED 
(
	[LoaderName] ASC,
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Loader_Type](
	[LoaderName] [varchar](100) NOT NULL,
	[IsDisabled] [bit] NOT NULL,
	[IsSecurity] [bit] NOT NULL,
	[IsReference] [bit] NOT NULL,
	[IsTableOnly] [bit] NOT NULL,
	[IsFiltered] [bit] NOT NULL,
	[HasHeapTable] [bit] NOT NULL,
	[Position] [int] NOT NULL,
	[LoadIntoHeapGroup] [int] NOT NULL,
	[IsFileRequired] [int] NOT NULL
 CONSTRAINT [PK_BatchLoad_Loader_Type_1] PRIMARY KEY CLUSTERED 
(
	[Position] ASC,
	[LoaderName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_BusinessRelationship](
	[PrimaryCode] [varchar](100) NOT NULL,
	[BusinessRelationshipId] [varchar](250) NULL,
	[Instructions] [varchar](250) NULL,
	[ExpectedInflow] [varchar](250) NULL,
	[ExpectedInflowCreationDate] [varchar](250) NULL,
	[EbankingFlag] [varchar](250) NULL,
	[InvestmentCategory] [varchar](250) NULL,
	[Segment] [varchar](250) NULL,
	[Dormant] [varchar](250) NULL,
	[MigrationOrigin] [varchar](250) NULL,
	[Currency] [varchar](250) NULL,
	[MainBusinessRelationshipId] [varchar](250) NULL,
	[GeneralCorrespondenceLanguageCode] [varchar](250) NULL,
	[Name] [varchar](250) NULL,
	[BeneficialOwnerCountryCode] [varchar](250) NULL,
	[BlockingCode] [varchar](250) NULL,
	[CommunicationLanguageCode] [varchar](250) NULL,
	[RegulatoryDomainCountryCode] [varchar](250) NULL,
	[RelationshipManagerId] [varchar](250) NULL,
	[ReportingLanguageCode] [varchar](250) NULL,
	[RiskLevel] [varchar](250) NULL,
	[RiskLevelNetreveal] [varchar](250) NULL,
	[RiskLevelNetrevealGroup] [varchar](250) NULL,
	[SizeCategory] [varchar](250) NULL,
	[StatusCode] [varchar](250) NULL,
	[ValidFrom] [varchar](250) NULL,
	[ValidUntil] [varchar](250) NULL,
	[VersionNumber] [varchar](250) NULL,
	[ClientCategory] [varchar](250) NULL,
	[Vip] [varchar](250) NULL,
	[PrimaryIntermediary] [varchar](250) NULL,
	[IntermediaryFirm] [varchar](250) NULL,
	[SecurityGroupCode] [varchar](250) NULL,
	[Activities] [varchar](250) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[GroupEntity] [nvarchar](250) NULL,
	[RiskLevelNetrevealGsf] [nvarchar](250) NULL,
	[MandatoryOfficialDocument] [nvarchar](250) NULL,
	[HomeAddressProof] [nvarchar](250) NULL,
	[ValidPowersMandates] [nvarchar](250) NULL,
	[CurrentProfessionalActivities] [nvarchar](250) NULL,
	[ProofIncomeAssets] [nvarchar](250) NULL,
    [CommercialStrategyAgreementPerson] [nvarchar](250) NULL,
	[AccountOpeningChannel] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_BusinessRelationship_PrimaryCode ON BatchLoad_Source_BusinessRelationship (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_BusinessRelationship_BusinessRelationshipId ON BatchLoad_Source_BusinessRelationship (BusinessRelationshipId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_BusinessRelationship_MainBusinessRelationshipId ON BatchLoad_Source_BusinessRelationship (MainBusinessRelationshipId)
GO

CREATE TABLE [dbo].[BatchLoad_Source_BusinessUnit](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[BusinessUnitPrimaryCode] [nvarchar](250) NULL,
	[BusinessUnitName] [nvarchar](250) NULL,
	[ParentBusinessUnitPrimaryCode] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_CESO](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[PartyID] [nvarchar](250) NULL,
	[PartyType] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValuedProfessionalAssetsPct] [nvarchar](250) NULL,
	[ValuedProfessionalAssetsAmt] [nvarchar](250) NULL,
	[AgeRangeCode] [nvarchar](250) NULL,
	[NationalIdentifier] [nvarchar](250) NULL,
	[RegistrationLocation] [nvarchar](250) NULL,
	[GlobalWealthEstimatedValueRangeCode] [nvarchar](250) NULL,
	[BalanceAmountRangeCode] [nvarchar](250) NULL,
	[OwnCapitalRangeCode] [nvarchar](250) NULL,
	[OwnTurnOverRangeCode] [nvarchar](250) NULL,
	[OwnRealEstateAmount] [nvarchar](250) NULL,
	[OwnRealEstateCurrency] [nvarchar](250) NULL,
	[InvestmentRealEstateAmount] [nvarchar](250) NULL,
	[InvestmentRealEstateCurrency] [nvarchar](250) NULL,
	[LongTermTotalWealthAmount] [nvarchar](250) NULL,
	[LongTermTotalWealthCurrency] [nvarchar](250) NULL,
	[ShortTermTotalWealthAmount] [nvarchar](250) NULL,
	[ShortTermTotalWealthCurrency] [nvarchar](250) NULL,
	[NonFinancialMovableAssetAmount] [nvarchar](250) NULL,
	[NonFinancialMovableAssetCurrency] [nvarchar](250) NULL,
	[FinancialRateInTotalAssetRangeCode] [nvarchar](250) NULL,
	[RateFinancialAssetBankDepositRangeCode] [nvarchar](250) NULL,
	[CurrentRateDebtInTotalAssetRangeCode] [nvarchar](250) NULL,
	[EstimatedAnnualRevenueRangeCode] [nvarchar](250) NULL,
	[EstimatedAnnualCostRangeCode] [nvarchar](250) NULL,
	[AvailableCashRangeCode] [nvarchar](250) NULL,
	[CesoReview] [nvarchar](250) NULL,
	[FinancialKnowledgeRangeCode] [nvarchar](250) NULL,
	[FinancialExperienceRangeCode] [nvarchar](250) NULL,
	[KnowledgeFrequencyFinancialMarketTrendRangeCode] [nvarchar](250) NULL,
	[FinancialAdvisorContact] [nvarchar](250) NULL,
	[PastExistingDiscretionaryMandate] [nvarchar](250) NULL,
	[ExecutedCashInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedInsuranceInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedBondsInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedSharesInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedSimpleFundInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedComplexFundInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedGuaranteedStructuredProductInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedNonGuaranteedStructuredProductInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedDerivatesInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedCommoditiesInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedPrivateEquityInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedCOCOBondsInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedACDCInvestmentLastPeriod] [nvarchar](250) NULL,
	[ExecutedRealEstateInvestmentLastPeriod] [nvarchar](250) NULL,
	[LossCashProductsInvestment] [nvarchar](250) NULL,
	[LossInsuranceInvestment] [nvarchar](250) NULL,
	[LossBondInvestment] [nvarchar](250) NULL,
	[LossSharesInvestment] [nvarchar](250) NULL,
	[LossSimpleFundsInvestment] [nvarchar](250) NULL,
	[LossComplexFundsInvestments] [nvarchar](250) NULL,
	[LossGuranteedStructuredProductsInvestments] [nvarchar](250) NULL,
	[LossNonGuranteedStructuredProductsInvestments] [nvarchar](250) NULL,
	[LossDerivatesInvestments] [nvarchar](250) NULL,
	[LossCommoditiesInvestments] [nvarchar](250) NULL,
	[LossPrivateEquityInvestments] [nvarchar](250) NULL,
	[LossACDCInvestments] [nvarchar](250) NULL,
	[LossCOCOBondsInvestments] [nvarchar](250) NULL,
	[LossRealEstateFundsInvestment] [nvarchar](250) NULL,
	[CashProductRiskPerformanceCode] [nvarchar](250) NULL,
	[CashProductInflationPerformanceCode] [nvarchar](250) NULL,
	[InsuranceProductRiskPerformanceCode] [nvarchar](250) NULL,
	[InsuranceProductAmountGuaranteedCode] [nvarchar](250) NULL,
	[BondValueIssuerQualityCode] [nvarchar](250) NULL,
	[BondRedemptionBeforeMaturityCode] [nvarchar](250) NULL,
	[SharesInvestmentPerformaceRiskCode] [nvarchar](250) NULL,
	[SharesValueChangeCompanyFinancialResultsCode] [nvarchar](250) NULL,
	[SimpleFundsRiskPerformanceInvestmentStrategyCode] [nvarchar](250) NULL,
	[SimpleFundsSubscriptionRedemptionCode] [nvarchar](250) NULL,
	[ComplexRealEstateFundsSaleWithoutConstraintCode] [nvarchar](250) NULL,
	[ComplexHedgeFundsAbsoluteLevelPerformanceCode] [nvarchar](250) NULL,
	[ComplexGuaranteedFundsCostFeeCode] [nvarchar](250) NULL,
	[StructuredProductsIssuerDefaultCode] [nvarchar](250) NULL,
	[StructuredProductsGuaranteedMaturityCode] [nvarchar](250) NULL,
	[StructuredProductsIssuerDefaultRiskCode] [nvarchar](250) NULL,
	[StructuredProductsNonGuaranteedRiskCapitalLossCode] [nvarchar](250) NULL,
	[StructuredProductsNonGuaranteedConvertibleBondsCode] [nvarchar](250) NULL,
	[ProductsCumulatedRisksCode] [nvarchar](250) NULL,
	[DerivatesInvestmentsNoRiskCapitalLossCode] [nvarchar](250) NULL,
	[DerivatesInvestmentsHighRiskCapitalLossCode] [nvarchar](250) NULL,
	[CommoditiesProductsMarketVolatilityCode] [nvarchar](250) NULL,
	[CommoditiesProductsGeopoliticImpactCode] [nvarchar](250) NULL,
	[CommoditiesProductsDollarRelatedQuotationCode] [nvarchar](250) NULL,
	[PrivateEquityListedCompanyInvestmentsCode] [nvarchar](250) NULL,
	[PrivateEquitySaleWithoutConstraintCode] [nvarchar](250) NULL,
	[PrivateEquityInvestmentsHighRiskCapitalLossCode] [nvarchar](250) NULL,
	[HighRiskLeverageOptions] [nvarchar](250) NULL,
	[UnknownUnderlyingAmount] [nvarchar](250) NULL,
	[ACDCOTC] [nvarchar](250) NULL,
	[DisinvestRealEstateFundWithoutConstraint] [nvarchar](250) NULL,
	[RealEstateFundHoldingPeriod] [nvarchar](250) NULL,
	[IndirectRealEstateFundInvestment] [nvarchar](250) NULL,
	[MainFinancialObjectiveCode] [nvarchar](250) NULL,
	[InvestmentHorizonCode] [nvarchar](250) NULL,
	[PortfolioSignificantDropReactionCode] [nvarchar](250) NULL,
	[FlexibleCashWithdrawPourcentageCode] [nvarchar](250) NULL,
	[PreferedInvestmentFormulaCode] [nvarchar](250) NULL,
	[CalculatedInvestmentProfileCode] [nvarchar](250) NULL,
	[InvestmentProfilDocumentSignatureDate] [nvarchar](250) NULL,
	[LegalRepresentativePartyId] [nvarchar](250) NULL,
	[FormStatus] [nvarchar](250) NULL,
	[TypeofNationalIdentificationNumber] [nvarchar](250) NULL,
	[SustainableInvestmentFlag] [nvarchar](250) NULL,

	[CashInvestmentCode] [nvarchar](250) NULL,
	[BondFundsCode] [nvarchar](250) NULL,
	[ComplexBondFundsCode] [nvarchar](250) NULL,
	[ConvertibleBondFundsCode] [nvarchar](250) NULL,
	[HighYieldEmergingBondFundsCode] [nvarchar](250) NULL,
	[EquityFundsCode] [nvarchar](250) NULL,
	[EmergingCountryEquityFundsCode] [nvarchar](250) NULL,
	[ExecutedEmergingCountryEquityFundsLastPeriod] [nvarchar](250) NULL,
	[FullCapitalGuranteedStructuredProductCode] [nvarchar](250) NULL,
	[NotfullCapitalGuranteedStructuredProductCode] [nvarchar](250) NULL,
	[RealEstateFundsCode] [nvarchar](250) NULL,
	[AlternativeInvestmentProductsCode] [nvarchar](250) NULL,
	[PrivateEquityProductsCode] [nvarchar](250) NULL,
	[PhysicalPreciousMetalsCode] [nvarchar](250) NULL,
	[ProductIndexedOnMetalsCode] [nvarchar](250) NULL,
	[ForwardForeignExchangeCode] [nvarchar](250) NULL,
	[DerivativesProductCode] [nvarchar](250) NULL,
	[AssetBackedSecuritiesCode] [nvarchar](250) NULL,
	[ExecutedBondFundsLastPeriod] [nvarchar](250) NULL,
	[ExecutedConvertibleBondFundsLastPeriod] [nvarchar](250) NULL,
	[ExecutedHighYieldEmergingBondFundsLastPeriod] [nvarchar](250) NULL,
	[ExecutedEquityFundsLastPeriod] [nvarchar](250) NULL,
	[ExecutedNotFullCapitalGuranteedStructuredProductLastPeriod] [nvarchar](250) NULL,
	[ExecutedRealEstateFundsLastPeriod] [nvarchar](250) NULL,
	[ExecutedPrivateEquityProductsLastPeriod] [nvarchar](250) NULL,	
	[MifPersonId] [nvarchar](250) NULL,		
	[LegalEntityIdentifier] [nvarchar](250) NULL,
	[LegalEntityIdentifierEndDate] [nvarchar](250) NULL,
	[ExecutedAlternativeInvestmentProductsLastPeriod] [nvarchar](250) NULL,
	[ExecutedPhysicalPreciousMetalsLastPeriod] [nvarchar](250) NULL,
	[ExecutedForwardForeignExchangeLastPeriod] [nvarchar](250) NULL,
	[ExecutedAssetBackedSecuritiesLastPeriod] [nvarchar](250) NULL,
	[MifidCategory] [nvarchar](250) NULL,
	[ExecutedFullCapitalGuranteedStructuredProductLastPeriod] [nvarchar](250) NULL,	
	[ExecutedProductIndexedOnMetalsLastPeriod] [nvarchar](250) NULL,
	[ExecutedDerivativesProductLastPeriod] [nvarchar](250) NULL,
	[ExecutedComplexBondFundsLastPeriod] [nvarchar](250) NULL
	
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ClientSubCategory](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_CommercialGroup](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[CommercialGroupId] [nvarchar](250) NULL,
	[Version] [nvarchar](250) NULL,
	[Label] [nvarchar](250) NULL,
	[ReferenceCurrency] [nvarchar](250) NULL,
	[ResponsibleId] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[SegmentId] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ContactPoint](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ContactPointId] [nvarchar](250) NULL,
	[Version] [nvarchar](250) NULL,
	[PartyId] [nvarchar](250) NULL,
	[SubTypeCode] [nvarchar](250) NULL,
	[AddressNumber] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[IsPrimary] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[RecipientName] [nvarchar](250) NULL,
	[PostalCode] [nvarchar](250) NULL,
	[CountryId] [nvarchar](250) NULL,
	[CareOfFlag] [nvarchar](250) NULL,
	[StreetNumber] [nvarchar](250) NULL,
	[StreetNumberSuffix] [nvarchar](250) NULL,
	[StreetName] [nvarchar](250) NULL,
	[Complement] [nvarchar](250) NULL,
	[City] [nvarchar](250) NULL,
	[PhoneNumber] [nvarchar](250) NULL,
	[FaxNumber] [nvarchar](250) NULL,
	[EmailAddress] [nvarchar](250) NULL,
	[StreetTypeCode] [nvarchar](250) NULL,
	[Complement2] [nvarchar](250) NULL,
	[CountryCallingCode] [nvarchar](250) NULL,
	[ZoneCallingCode] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Country](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Label] [nvarchar](250) NULL,
	[IsoCode] [nvarchar](250) NULL,
	[SectGeo] [nvarchar](250) NULL,
	[SectEco] [nvarchar](250) NULL,
	[Currency] [nvarchar](250) NULL,
	[WcCountryCode] [nvarchar](250) NULL,
	[ZoneLGD] [nvarchar](250) NULL,
	[RatingCountry] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL,
	[NoTaxCountry] [nvarchar](250) NULL,
	[ISO3ACountryCode] [varchar](3) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Currency](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[IsoCode] [nvarchar](250) NULL,
	[IsoNumber] [nvarchar](250) NULL,
	[Telekurs] [nvarchar](250) NULL,
	[Label] [nvarchar](250) NULL,
	[Country] [nvarchar](250) NULL,
	[DecimalNumber] [nvarchar](250) NULL,
	[FinancialPlace] [nvarchar](250) NULL,
	[UsanceCode] [nvarchar](250) NULL,
	[DisplayOrder] [nvarchar](250) NULL,
	[Arrondi] [nvarchar](250) NULL,
	[CashAccount] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_DKYC](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ClientPrimaryCode] [nvarchar](100) NULL,
	[IsIndividual] [bit] NULL,
	[Values] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_DocumentType](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[CodeOne] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ExchangeRate](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[typ_crs] [nvarchar](250) NULL,
	[cd_mon_1] [nvarchar](250) NULL,
	[cd_mon_2] [nvarchar](250) NULL,
	[dt_vble_crs] [nvarchar](250) NULL,
	[hr_vble_crs] [nvarchar](250) NULL,
	[crs_chge_ach] [nvarchar](250) NULL,
	[crs_chge_vte] [nvarchar](250) NULL,
	[crs_chge_moy] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[hr_mut] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[dt_visa] [nvarchar](250) NULL,
	[pers_visa] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ExternalCustomerCode](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_GedIntervenant](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ITEMID] [nvarchar](250) NULL,
    [NOCLI] [nvarchar](250) NOT NULL,
	[DOCDATE] [nvarchar](250) NULL,
	[ARCHDATE] [nvarchar](250) NULL,
	[DOCDESC] [nvarchar](250) NULL,
	[DOCTYPE] [nvarchar](250) NULL,
	[BRCODE] [nvarchar](250) NULL,
	[DOCNPAGE] [nvarchar](250) NULL,
	[NOREF1] [nvarchar](250) NULL,
	[NOREF2] [nvarchar](250) NULL,
	[CLOSEDATE] [nvarchar](250) NULL,
) ON [PRIMARY]
CREATE TABLE [dbo].[BatchLoad_Source_GedIndividual](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ITEMID] [nvarchar](250) NULL,
	[NOINDIVIDU] [nvarchar](250) NOT NULL,
	[DOCDATE] [nvarchar](250) NULL,
	[ARCHDATE] [nvarchar](250) NULL,
	[DOCDESC] [nvarchar](250) NULL,
	[DOCTYPE] [nvarchar](250) NULL,
	[BRCODE] [nvarchar](250) NULL,
	[DOCNPAGE] [nvarchar](250) NULL,	
	[NOREF1] [nvarchar](250) NULL,
	[NOREF2] [nvarchar](250) NULL,
	[CLOSEDATE] [nvarchar](250) NULL,
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_IdocProduct](
	[PrimaryCode] [nvarchar](100) NULL,
	[idoc_ref_no] [nvarchar](250) NULL,
	[no_intv] [nvarchar](250) NULL,
	[no_doc] [nvarchar](250) NULL,
	[no_ver] [nvarchar](250) NULL,
	[no_seq] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[typ_sign_doc] [nvarchar](250) NULL,
	[dt_ech_reg] [nvarchar](250) NULL,
	[dt_ech_doc] [nvarchar](250) NULL,
	[typ_sign_hist] [nvarchar](250) NULL,
	[dt_cre] [nvarchar](250) NULL,
	[pers_cre] [nvarchar](250) NULL,
	[no_ord] [nvarchar](250) NULL,
	[pays_etbl] [nvarchar](250) NULL,
	[fl_doc_err] [nvarchar](250) NULL,
	[dt_etbl] [nvarchar](250) NULL,
	[wcf_filler] [nvarchar](250) NULL
) ON [PRIMARY]
CREATE TABLE [dbo].[BatchLoad_Source_IdocParty](
	[PrimaryCode] [nvarchar](100) NULL,
	[idoc_ref_no] [nvarchar](250) NULL,
	[no_intv] [nvarchar](250) NULL,
	[no_indv] [nvarchar](250) NULL,
	[no_doc] [nvarchar](250) NULL,
	[no_ver] [nvarchar](250) NULL,
	[no_seq] [nvarchar](250) NULL,
	[no_seq_doc_indv] [nvarchar](250) NULL,
	[dt_deb_vald] [nvarchar](250) NULL,
	[dt_fin_vald] [nvarchar](250) NULL,
	[dt_ech_doc] [nvarchar](250) NULL,
	[typ_sign_doc] [nvarchar](250) NULL,
	[typ_sign_hist] [nvarchar](250) NULL,
	[dt_cre] [nvarchar](250) NULL,
	[pers_cre] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[pays_etbl] [nvarchar](250) NULL,
	[fl_doc_err] [nvarchar](250) NULL,
	[filler_9] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDIVIDU](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[NO_ORD_HIST] [nvarchar](250) NULL,
	[DT_OUV] [nvarchar](250) NULL,
	[INTL_INDV] [nvarchar](250) NULL,
	[NO_IDE_NAT] [nvarchar](250) NULL,
	[TYP_IDE_NAT] [nvarchar](250) NULL,
	[RUPT_REL] [nvarchar](250) NULL,
	[DT_ENRG_STE] [nvarchar](250) NULL,
	[CD_POSTAL_NAIS] [nvarchar](250) NULL,
	[TYP_PEP] [nvarchar](250) NULL,
	[CIBLE_SANCTION] [nvarchar](250) NULL,
	[TRUST] [nvarchar](250) NULL,
	[TRUST_DISCR] [nvarchar](250) NULL,
	[TRUST_REVOC] [nvarchar](250) NULL,
	[FL_REL_AUTRE_ENTIT] [nvarchar](250) NULL,
	[AUTRE_ENTIT] [nvarchar](250) NULL,
	[AUTRE_ENTIT_2] [nvarchar](250) NULL,
	[GRP_COT_BRS] [nvarchar](250) NULL,
	[MRCH_COT] [nvarchar](250) NULL,
	[INDV_QUAL] [nvarchar](250) NULL,
	[INDV_VULN] [nvarchar](250) NULL,
	[RAISON_VULN] [nvarchar](250) NULL,
	[REG_FISC_SPF] [nvarchar](250) NULL,
	[INDV_SENSI_MRCH] [nvarchar](250) NULL,
	[DT_NAIS] [nvarchar](250) NULL,
	[INTL_CTRL] [nvarchar](250) NULL,
	[PNOM_USU] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_IndividualAddressType](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDV_CMTR](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[NO_ORD_HIST] [nvarchar](250) NULL,
	[DT_OUV] [nvarchar](250) NULL,
	[CD_TXT] [nvarchar](250) NULL,
	[NO_LGN] [nvarchar](250) NULL,
	[TXT] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDV_CPLM](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[NO_ORD_HIST] [nvarchar](250) NULL,
	[NB_SALAR] [nvarchar](250) NULL,
	[PAYS_PRFS] [nvarchar](250) NULL,
	[CSP] [nvarchar](250) NULL,
	[CD_REGULE] [nvarchar](250) NULL,
	[NOM_REGUL] [nvarchar](250) NULL,
	[POTL_LIQ] [nvarchar](250) NULL,
	[POTL_MOBIL] [nvarchar](250) NULL,
	[POTL_IMMO] [nvarchar](250) NULL,
	[POTL_COMR] [nvarchar](250) NULL,
	[POTL_AUTR] [nvarchar](250) NULL,
	[MNT_ENG_TRM_1] [nvarchar](250) NULL,
	[TYP_ENG_TRM_1] [nvarchar](250) NULL,
	[DT_RENC] [nvarchar](250) NULL,
	[LIEU_RENC] [nvarchar](250) NULL,
	[DT_RENC_PREVU] [nvarchar](250) NULL,
	[DT_ECH_TRM_1] [nvarchar](250) NULL,
	[DT_DER_SIGN_KYC] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDV_CPLM2](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[FL_BQUE_PRIV] [nvarchar](250) NULL,
	[FL_TRADE_FINC] [nvarchar](250) NULL,
	[FL_COR_BAN] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDV_PAYS_ACVT](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[NO_SEQ_GRP] [nvarchar](250) NULL,
	[TYP_ACVT] [nvarchar](250) NULL,
	[PAYS_ACVT] [nvarchar](250) NULL,
	[PCT_CA] [nvarchar](250) NULL,
	[PCT_ACH] [nvarchar](250) NULL,
	[FILLER_15] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INDV_QUEST_PAYS](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[NO_SEQ_GRP] [nvarchar](250) NULL,
	[TYP_ACVT] [nvarchar](250) NULL,
	[CD_CHX] [nvarchar](250) NULL,
	[FL_OFAC] [nvarchar](250) NULL,
	[FL_UE] [nvarchar](250) NULL,
	[FL_AUTRE] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_INTV](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INTV] [nvarchar](250) NULL,
	[ACT_CONST] [nvarchar](250) NULL,
	[CPTE_NUM_NOM] [nvarchar](250) NULL,
	[TYP_CLO] [nvarchar](250) NULL,
	[DT_DER_SIGN_KYC] [nvarchar](250) NULL,
	[CLI_SURV] [nvarchar](250) NULL,
	[DEV_FORT_ATTN] [nvarchar](250) NULL,
	[NO_VER] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_InvestmentHorizon](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Language](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_LastContactDate](
	[PrimaryCode] [nvarchar](50) NOT NULL,
	[IntervenantNumber] [nvarchar](50) NULL,
	[ContactDate] [date] NULL,
	[Contact] [nvarchar](50) NULL,
	[Pers154] [nvarchar](50) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ManagementProfile](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Ownership](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[TargetType] [nvarchar](100) NOT NULL,
	[TargetPrimaryCode] [nvarchar](100) NOT NULL,
	[OwnerPrimaryCode] [nvarchar](100) NULL,
	[ShareWithPrincipals] [nvarchar](max) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Party](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[PartyId] [nvarchar](100) NULL,
	[TaxReference1] [nvarchar](250) NULL,
	[TaxResidence1] [nvarchar](250) NULL,
	[TaxReference2] [nvarchar](250) NULL,
	[TaxResidence2] [nvarchar](250) NULL,
	[TaxReference3] [nvarchar](250) NULL,
	[TaxResidence3] [nvarchar](250) NULL,
	[TaxReference4] [nvarchar](250) NULL,
	[TaxResidence4] [nvarchar](250) NULL,
	[TaxReference5] [nvarchar](250) NULL,
	[TaxResidence5] [nvarchar](250) NULL,
	[MeetTheOwnerPurpose] [nvarchar](max) NULL,
	[PrimarySourceOfWealthDetails] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_PartyTaxCountry](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[no_indv] [nvarchar](250) NULL,
	[no_seq_grp] [nvarchar](250) NULL,
	[pays_resd_fisc] [nvarchar](250) NULL,
	[dt_deb_vald] [nvarchar](250) NULL,
	[no_fisc] [nvarchar](250) NULL,
	[cd_etat] [nvarchar](250) NULL,
	[dt_sais] [nvarchar](250) NULL,
	[pers_sais] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[non_saisie] [nvarchar](250) NULL,
	[filler_9_1] [nvarchar](250) NULL,
	[cmtr] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ProductAccount](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ProductAccountId] [nvarchar](250) NULL,
	[Name] [nvarchar](250) NULL,
	[RelationshipManagerId] [nvarchar](250) NULL,
	[Currency] [nvarchar](250) NULL,
	[MandateType] [nvarchar](250) NULL,
	[PortfolioStrategy] [nvarchar](250) NULL,
	[LatestValueDate] [nvarchar](250) NULL,
	[NetTotalWealth] [nvarchar](250) NULL,
	[NetSecurityWealth] [nvarchar](250) NULL,
	[TotalInjection] [nvarchar](250) NULL,
	[TotalWithdrawal] [nvarchar](250) NULL,
	[BalanceSinceLastValueDate] [nvarchar](250) NULL,
	[PrimaryIntermediary] [nvarchar](250) NULL,
	[PortfolioManagerCode] [nvarchar](250) NULL,
	[IntermediaryFirm] [nvarchar](250) NULL,
	[BlockingCode] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[TWRPerformanceYTD] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[ConfidentialityCode] [nvarchar](250) NULL,
	[ExternalClientCode] [nvarchar](250) NULL,
	[MainBusinessRelationshipId] [nvarchar](250) NULL,
	[MWRPerformanceYTD] [nvarchar](250) NULL,
	[AssetType] [nvarchar](250) NULL,
	[TwrPerformanceCode] [nvarchar](250) NULL,
	[VIP] [nvarchar](250) NULL,
	[InvestmentTimeHorizon] [nvarchar](250) NULL,
	[VersionNumber] [nvarchar](250) NULL,
	[ClientCategory] [nvarchar](250) NULL,
	[GrossValue] [nvarchar](250) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[reasonForBlocking] [nvarchar](4000) NULL,
	[reasonForClosureCode] [nvarchar](100) NULL,
	[reasonForClosure] [nvarchar](4000) NULL,
	[FreeCashAmount] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_ProductAccount_PrimaryCode ON BatchLoad_Source_ProductAccount (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_ProductAccount_ProductAccountId ON BatchLoad_Source_ProductAccount (ProductAccountId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_ProductAccount_MainBusinessRelationshipId ON BatchLoad_Source_ProductAccount (MainBusinessRelationshipId)
GO

CREATE TABLE [dbo].[BatchLoad_Source_Provider](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[cav_t042] [nvarchar](250) NULL,
	[lib_30] [nvarchar](250) NULL,
	[no_intv] [nvarchar](250) NULL,
	[letr_cle] [nvarchar](250) NULL,
	[siege] [nvarchar](250) NULL,
	[no_ord_cpte] [nvarchar](250) NULL,
	[cd_mon] [nvarchar](250) NULL,
	[dt_arrv] [nvarchar](250) NULL,
	[no_ver] [nvarchar](250) NULL,
	[rais_soc] [nvarchar](250) NULL,
	[pays_dom_tva] [nvarchar](250) NULL,
	[no_ord_perm] [nvarchar](250) NULL,
	[cd_vir] [nvarchar](250) NULL,
	[dt_ent_rel] [nvarchar](250) NULL,
	[pers_intr] [nvarchar](250) NULL,
	[duree_ctrt] [nvarchar](250) NULL,
	[per_dem_ouv] [nvarchar](250) NULL,
	[resp_rel] [nvarchar](250) NULL,
	[pers_autr_ouv] [nvarchar](250) NULL,
	[cd_avis_autq] [nvarchar](250) NULL,
	[ctrt_app] [nvarchar](250) NULL,
	[dt_mut_042] [nvarchar](250) NULL,
	[hr_mut_042] [nvarchar](250) NULL,
	[pers_mut_042] [nvarchar](250) NULL,
	[dt_mut_cav] [nvarchar](250) NULL,
	[hr_mut_cav] [nvarchar](250) NULL,
	[pers_mut_cav] [nvarchar](250) NULL,
	[contrib_tva] [nvarchar](250) NULL,
	[no_tva] [nvarchar](250) NULL,
	[typ_app] [nvarchar](250) NULL,
	[per_paie] [nvarchar](250) NULL,
	[cd_lng] [nvarchar](250) NULL,
	[resp_zone] [nvarchar](250) NULL,
	[resp_dpt] [nvarchar](250) NULL,
	[mod_calc_retr] [nvarchar](250) NULL,
	[no_intv_cav] [nvarchar](250) NULL,
	[grp_cav] [nvarchar](250) NULL,
	[letr_deleg] [nvarchar](250) NULL,
	[cd_cli_extn] [nvarchar](250) NULL,
	[cd_etat_cav] [nvarchar](250) NULL,
	[tva_chrg_bque] [nvarchar](250) NULL,
	[cal_ffee] [nvarchar](250) NULL,
	[ren_cal_ffee] [nvarchar](250) NULL,
	[persis_ffee] [nvarchar](250) NULL,
	[dur_ffee] [nvarchar](250) NULL,
	[per_ffee] [nvarchar](250) NULL,
	[dt_der_cal] [nvarchar](250) NULL,
	[dt_deb_ffee] [nvarchar](250) NULL,
	[dt_der_app] [nvarchar](250) NULL,
	[app_prfs] [nvarchar](250) NULL,
	[letr_affir] [nvarchar](250) NULL,
	[cd_ref_cav_cli_cef] [nvarchar](250) NULL,
	[nb_calc] [nvarchar](250) NULL,
	[per_calc] [nvarchar](250) NULL,
	[nb_mois_peri] [nvarchar](250) NULL,
	[cd_ren_autq] [nvarchar](250) NULL,
	[dt_ech_ren] [nvarchar](250) NULL,
	[deleg_t_chg] [nvarchar](250) NULL,
	[deleg_t_brs] [nvarchar](250) NULL,
	[pers_phys_morl] [nvarchar](250) NULL,
	[dt_deb_acvt] [nvarchar](250) NULL,
	[cd_tva_dom] [nvarchar](250) NULL,
	[fl_lim_tps_retc] [nvarchar](250) NULL,
	[dur_lim_tps_retc] [nvarchar](250) NULL,
	[letr_lpcc] [nvarchar](250) NULL,
	[grp_apce] [nvarchar](250) NULL,
	[ssg] [nvarchar](250) NULL,
	[id_extn] [nvarchar](250) NULL,
	[cd_oar] [nvarchar](250) NULL,
	[dt_affil_oar] [nvarchar](250) NULL,
	[no_intv_pay2] [nvarchar](250) NULL,
	[letr_cle_pay2] [nvarchar](250) NULL,
	[siege_pay2] [nvarchar](250) NULL,
	[no_ord_cpte_pay2] [nvarchar](250) NULL,
	[cd_mon_pay2] [nvarchar](250) NULL,
	[no_intv_recv1] [nvarchar](250) NULL,
	[letr_cle_recv1] [nvarchar](250) NULL,
	[siege_recv1] [nvarchar](250) NULL,
	[no_ord_cpte_recv1] [nvarchar](250) NULL,
	[cd_mon_recv1] [nvarchar](250) NULL,
	[no_intv_recv2] [nvarchar](250) NULL,
	[letr_cle_recv2] [nvarchar](250) NULL,
	[siege_recv2] [nvarchar](250) NULL,
	[no_ord_cpte_recv2] [nvarchar](250) NULL,
	[cd_mon_recv2] [nvarchar](250) NULL,
	[no_intv_mir_cav] [nvarchar](250) NULL,
	[indc_metropole] [nvarchar](250) NULL,
	[cd_fourn] [nvarchar](250) NULL,
	[deleg_rprt_rdt] [nvarchar](250) NULL,
	[eligb_rdt] [nvarchar](250) NULL,
	[fl_in_rprt_ct_chrg] [nvarchar](250) NULL,
	[filler_07] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ReferenceDataRemediation](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[API] [nvarchar](250) NULL,
	[V1_wdx_code] [nvarchar](250) NULL,
	[V2_wdx_code] [nvarchar](250) NULL,
	[S2i_Record_Id] [nvarchar](250) NULL,
	[S2i_Record_Name] [nvarchar](250) NULL,
	[WDX_Entity] [nvarchar](250) NULL,
	[WDX_Record_Primary_Code] [nvarchar](250) NULL,
	[WDX_Record_Name] [nvarchar](250) NULL,
	[Selectable_in_WDX] [nvarchar](250) NULL,
	[Source] [nvarchar](250) NULL,
	[Action] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ReferenceDataType](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_ResponsibleParty](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ResponsiblePartyPrimaryCode] [nvarchar](250) NULL,
	[ResponsiblePartyName] [nvarchar](250) NULL,
	[OwningTeamPrimaryCode] [nvarchar](250) NULL,
	[CodeTwo] [nvarchar](250) NULL,
	[State] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_SUIVI_REL_CLI](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[NO_INTV] [nvarchar](250) NULL,
	[CD_TYP_POU] [nvarchar](250) NULL,
	[NO_INDV] [nvarchar](250) NULL,
	[TYP_DOS] [nvarchar](250) NULL,
	[DT_CRE_DOS] [nvarchar](250) NULL,
	[CANAL_EER] [nvarchar](250) NULL,
	[CPTE_JOINT_COLL] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_SystemUser](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[UserPrimaryCode] [nvarchar](250) NULL,
	[UserId] [nvarchar](250) NULL,
	[FirstName] [nvarchar](250) NULL,
	[LastName] [nvarchar](250) NULL,
	[CF30] [nvarchar](250) NULL,
	[UserName] [nvarchar](250) NULL,
	[BusinessUnitPrimaryCode] [nvarchar](250) NULL,
	[ServiceCode] [nvarchar](250) NULL,
	[ServiceName] [nvarchar](250) NULL,
	[DepartmentCode] [nvarchar](250) NULL,
	[DepartmentName] [nvarchar](250) NULL,
	[Grade] [nvarchar](250) NULL,
	[Language] [nvarchar](250) NULL,
	[Roles] [nvarchar](250) NULL,
	[Teams] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Team](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[TeamPrimaryCode] [nvarchar](250) NULL,
	[TeamName] [nvarchar](250) NULL,
	[OwningBusinessUnitPrimaryCode] [nvarchar](250) NULL,
	[Roles] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Title](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Rep_AssetClass](
	[PrimaryCode] [nvarchar](250) NOT NULL,
	[ProductAccountId] [nvarchar](250) NULL,
	[SimulationReference] [nvarchar](250) NULL,
	[BreakdownDate] [nvarchar](250) NULL,
	[FolderNumber] [nvarchar](250) NULL,
	[BreakdownReferenceNumber] [nvarchar](250) NULL,
	[BreakdownType] [nvarchar](250) NULL,
	[ContentType] [nvarchar](250) NULL,
	[BreakdownTime] [nvarchar](250) NULL,
	[ConsolidationIndicator] [nvarchar](250) NULL,
	[GeoBreakdownIndicator] [nvarchar](250) NULL,
	[BreakdownIndicator6Currencies] [nvarchar](250) NULL,
	[MetalAccountIndicator] [nvarchar](250) NULL,
	[CautionCommitmentIndicator] [nvarchar](250) NULL,
	[PreInputOperationIndicator] [nvarchar](250) NULL,
	[BreakdownCurrency] [nvarchar](250) NULL,
	[BreakdownCurrency1] [nvarchar](250) NULL,
	[BreakdownCurrency2] [nvarchar](250) NULL,
	[BreakdownCurrency3] [nvarchar](250) NULL,
	[BreakdownCurrency4] [nvarchar](250) NULL,
	[BreakdownCurrency5] [nvarchar](250) NULL,
	[AssetTypeId1] [nvarchar](250) NULL,
	[AssetTypeAmount1_1] [nvarchar](250) NULL,
	[AssetTypeAmount1_2] [nvarchar](250) NULL,
	[AssetTypeAmount1_3] [nvarchar](250) NULL,
	[AssetTypeAmount1_4] [nvarchar](250) NULL,
	[AssetTypeAmount1_5] [nvarchar](250) NULL,
	[AssetTypeAmount1_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator1] [nvarchar](250) NULL,
	[AccruedInterestAmount1] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator1] [nvarchar](250) NULL,
	[AssetTypeId2] [nvarchar](250) NULL,
	[AssetTypeAmount2_1] [nvarchar](250) NULL,
	[AssetTypeAmount2_2] [nvarchar](250) NULL,
	[AssetTypeAmount2_3] [nvarchar](250) NULL,
	[AssetTypeAmount2_4] [nvarchar](250) NULL,
	[AssetTypeAmount2_5] [nvarchar](250) NULL,
	[AssetTypeAmount2_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator2] [nvarchar](250) NULL,
	[AccruedInterestAmount2] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator2] [nvarchar](250) NULL,
	[AssetTypeId3] [nvarchar](250) NULL,
	[AssetTypeAmount3_1] [nvarchar](250) NULL,
	[AssetTypeAmount3_2] [nvarchar](250) NULL,
	[AssetTypeAmount3_3] [nvarchar](250) NULL,
	[AssetTypeAmount3_4] [nvarchar](250) NULL,
	[AssetTypeAmount3_5] [nvarchar](250) NULL,
	[AssetTypeAmount3_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator3] [nvarchar](250) NULL,
	[AccruedInterestAmount3] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator3] [nvarchar](250) NULL,
	[AssetTypeId4] [nvarchar](250) NULL,
	[AssetTypeAmount4_1] [nvarchar](250) NULL,
	[AssetTypeAmount4_2] [nvarchar](250) NULL,
	[AssetTypeAmount4_3] [nvarchar](250) NULL,
	[AssetTypeAmount4_4] [nvarchar](250) NULL,
	[AssetTypeAmount4_5] [nvarchar](250) NULL,
	[AssetTypeAmount4_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator4] [nvarchar](250) NULL,
	[AccruedInterestAmount4] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator4] [nvarchar](250) NULL,
	[AssetTypeId5] [nvarchar](250) NULL,
	[AssetTypeAmount5_1] [nvarchar](250) NULL,
	[AssetTypeAmount5_2] [nvarchar](250) NULL,
	[AssetTypeAmount5_3] [nvarchar](250) NULL,
	[AssetTypeAmount5_4] [nvarchar](250) NULL,
	[AssetTypeAmount5_5] [nvarchar](250) NULL,
	[AssetTypeAmount5_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator5] [nvarchar](250) NULL,
	[AccruedInterestAmount5] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator5] [nvarchar](250) NULL,
	[AssetTypeId6] [nvarchar](250) NULL,
	[AssetTypeAmount6_1] [nvarchar](250) NULL,
	[AssetTypeAmount6_2] [nvarchar](250) NULL,
	[AssetTypeAmount6_3] [nvarchar](250) NULL,
	[AssetTypeAmount6_4] [nvarchar](250) NULL,
	[AssetTypeAmount6_5] [nvarchar](250) NULL,
	[AssetTypeAmount6_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator6] [nvarchar](250) NULL,
	[AccruedInterestAmount6] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator6] [nvarchar](250) NULL,
	[AssetTypeId7] [nvarchar](250) NULL,
	[AssetTypeAmount7_1] [nvarchar](250) NULL,
	[AssetTypeAmount7_2] [nvarchar](250) NULL,
	[AssetTypeAmount7_3] [nvarchar](250) NULL,
	[AssetTypeAmount7_4] [nvarchar](250) NULL,
	[AssetTypeAmount7_5] [nvarchar](250) NULL,
	[AssetTypeAmount7_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator7] [nvarchar](250) NULL,
	[AccruedInterestAmount7] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator7] [nvarchar](250) NULL,
	[AssetTypeId8] [nvarchar](250) NULL,
	[AssetTypeAmount8_1] [nvarchar](250) NULL,
	[AssetTypeAmount8_2] [nvarchar](250) NULL,
	[AssetTypeAmount8_3] [nvarchar](250) NULL,
	[AssetTypeAmount8_4] [nvarchar](250) NULL,
	[AssetTypeAmount8_5] [nvarchar](250) NULL,
	[AssetTypeAmount8_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator8] [nvarchar](250) NULL,
	[AccruedInterestAmount8] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator8] [nvarchar](250) NULL,
	[AssetTypeId9] [nvarchar](250) NULL,
	[AssetTypeAmount9_1] [nvarchar](250) NULL,
	[AssetTypeAmount9_2] [nvarchar](250) NULL,
	[AssetTypeAmount9_3] [nvarchar](250) NULL,
	[AssetTypeAmount9_4] [nvarchar](250) NULL,
	[AssetTypeAmount9_5] [nvarchar](250) NULL,
	[AssetTypeAmount9_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator9] [nvarchar](250) NULL,
	[AccruedInterestAmount9] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator9] [nvarchar](250) NULL,
	[AssetTypeId10] [nvarchar](250) NULL,
	[AssetTypeAmount10_1] [nvarchar](250) NULL,
	[AssetTypeAmount10_2] [nvarchar](250) NULL,
	[AssetTypeAmount10_3] [nvarchar](250) NULL,
	[AssetTypeAmount10_4] [nvarchar](250) NULL,
	[AssetTypeAmount10_5] [nvarchar](250) NULL,
	[AssetTypeAmount10_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator10] [nvarchar](250) NULL,
	[AccruedInterestAmount10] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator10] [nvarchar](250) NULL,
	[AssetTypeId11] [nvarchar](250) NULL,
	[AssetTypeAmount11_1] [nvarchar](250) NULL,
	[AssetTypeAmount11_2] [nvarchar](250) NULL,
	[AssetTypeAmount11_3] [nvarchar](250) NULL,
	[AssetTypeAmount11_4] [nvarchar](250) NULL,
	[AssetTypeAmount11_5] [nvarchar](250) NULL,
	[AssetTypeAmount11_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator11] [nvarchar](250) NULL,
	[AccruedInterestAmount11] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator11] [nvarchar](250) NULL,
	[AssetTypeId12] [nvarchar](250) NULL,
	[AssetTypeAmount12_1] [nvarchar](250) NULL,
	[AssetTypeAmount12_2] [nvarchar](250) NULL,
	[AssetTypeAmount12_3] [nvarchar](250) NULL,
	[AssetTypeAmount12_4] [nvarchar](250) NULL,
	[AssetTypeAmount12_5] [nvarchar](250) NULL,
	[AssetTypeAmount12_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator12] [nvarchar](250) NULL,
	[AccruedInterestAmount12] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator12] [nvarchar](250) NULL,
	[AssetTypeId13] [nvarchar](250) NULL,
	[AssetTypeAmount13_1] [nvarchar](250) NULL,
	[AssetTypeAmount13_2] [nvarchar](250) NULL,
	[AssetTypeAmount13_3] [nvarchar](250) NULL,
	[AssetTypeAmount13_4] [nvarchar](250) NULL,
	[AssetTypeAmount13_5] [nvarchar](250) NULL,
	[AssetTypeAmount13_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator13] [nvarchar](250) NULL,
	[AccruedInterestAmount13] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator13] [nvarchar](250) NULL,
	[AssetTypeId14] [nvarchar](250) NULL,
	[AssetTypeAmount14_1] [nvarchar](250) NULL,
	[AssetTypeAmount14_2] [nvarchar](250) NULL,
	[AssetTypeAmount14_3] [nvarchar](250) NULL,
	[AssetTypeAmount14_4] [nvarchar](250) NULL,
	[AssetTypeAmount14_5] [nvarchar](250) NULL,
	[AssetTypeAmount14_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator14] [nvarchar](250) NULL,
	[AccruedInterestAmount14] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator14] [nvarchar](250) NULL,
	[AssetTypeId15] [nvarchar](250) NULL,
	[AssetTypeAmount15_1] [nvarchar](250) NULL,
	[AssetTypeAmount15_2] [nvarchar](250) NULL,
	[AssetTypeAmount15_3] [nvarchar](250) NULL,
	[AssetTypeAmount15_4] [nvarchar](250) NULL,
	[AssetTypeAmount15_5] [nvarchar](250) NULL,
	[AssetTypeAmount15_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator15] [nvarchar](250) NULL,
	[AccruedInterestAmount15] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator15] [nvarchar](250) NULL,
	[AssetTypeId16] [nvarchar](250) NULL,
	[AssetTypeAmount16_1] [nvarchar](250) NULL,
	[AssetTypeAmount16_2] [nvarchar](250) NULL,
	[AssetTypeAmount16_3] [nvarchar](250) NULL,
	[AssetTypeAmount16_4] [nvarchar](250) NULL,
	[AssetTypeAmount16_5] [nvarchar](250) NULL,
	[AssetTypeAmount16_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator16] [nvarchar](250) NULL,
	[AccruedInterestAmount16] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator16] [nvarchar](250) NULL,
	[AssetTypeId17] [nvarchar](250) NULL,
	[AssetTypeAmount17_1] [nvarchar](250) NULL,
	[AssetTypeAmount17_2] [nvarchar](250) NULL,
	[AssetTypeAmount17_3] [nvarchar](250) NULL,
	[AssetTypeAmount17_4] [nvarchar](250) NULL,
	[AssetTypeAmount17_5] [nvarchar](250) NULL,
	[AssetTypeAmount17_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator17] [nvarchar](250) NULL,
	[AccruedInterestAmount17] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator17] [nvarchar](250) NULL,
	[AssetTypeId18] [nvarchar](250) NULL,
	[AssetTypeAmount18_1] [nvarchar](250) NULL,
	[AssetTypeAmount18_2] [nvarchar](250) NULL,
	[AssetTypeAmount18_3] [nvarchar](250) NULL,
	[AssetTypeAmount18_4] [nvarchar](250) NULL,
	[AssetTypeAmount18_5] [nvarchar](250) NULL,
	[AssetTypeAmount18_6] [nvarchar](250) NULL,
	[SecurityCashAssetTypeIndicator18] [nvarchar](250) NULL,
	[AccruedInterestAmount18] [nvarchar](250) NULL,
	[AssetTypePreInputIndicator18] [nvarchar](250) NULL,
	[FolderId1] [nvarchar](250) NULL,
	[FolderAssetAmount1] [nvarchar](250) NULL,
	[FolderPreInputIndicator1] [nvarchar](250) NULL,
	[FolderId2] [nvarchar](250) NULL,
	[FolderAssetAmount2] [nvarchar](250) NULL,
	[FolderPreInputIndicator2] [nvarchar](250) NULL,
	[FolderId3] [nvarchar](250) NULL,
	[FolderAssetAmount3] [nvarchar](250) NULL,
	[FolderPreInputIndicator3] [nvarchar](250) NULL,
	[FolderId4] [nvarchar](250) NULL,
	[FolderAssetAmount4] [nvarchar](250) NULL,
	[FolderPreInputIndicator4] [nvarchar](250) NULL,
	[FolderId5] [nvarchar](250) NULL,
	[FolderAssetAmount5] [nvarchar](250) NULL,
	[FolderPreInputIndicator5] [nvarchar](250) NULL,
	[FolderId6] [nvarchar](250) NULL,
	[FolderAssetAmount6] [nvarchar](250) NULL,
	[FolderPreInputIndicator6] [nvarchar](250) NULL,
	[FolderId7] [nvarchar](250) NULL,
	[FolderAssetAmount7] [nvarchar](250) NULL,
	[FolderPreInputIndicator7] [nvarchar](250) NULL,
	[FolderId8] [nvarchar](250) NULL,
	[FolderAssetAmount8] [nvarchar](250) NULL,
	[FolderPreInputIndicator8] [nvarchar](250) NULL,
	[FolderId9] [nvarchar](250) NULL,
	[FolderAssetAmount9] [nvarchar](250) NULL,
	[FolderPreInputIndicator9] [nvarchar](250) NULL,
	[FolderId10] [nvarchar](250) NULL,
	[FolderAssetAmount10] [nvarchar](250) NULL,
	[FolderPreInputIndicator10] [nvarchar](250) NULL,
	[FolderId11] [nvarchar](250) NULL,
	[FolderAssetAmount11] [nvarchar](250) NULL,
	[FolderPreInputIndicator11] [nvarchar](250) NULL,
	[FolderId12] [nvarchar](250) NULL,
	[FolderAssetAmount12] [nvarchar](250) NULL,
	[FolderPreInputIndicator12] [nvarchar](250) NULL,
	[FolderId13] [nvarchar](250) NULL,
	[FolderAssetAmount13] [nvarchar](250) NULL,
	[FolderPreInputIndicator13] [nvarchar](250) NULL,
	[FolderId14] [nvarchar](250) NULL,
	[FolderAssetAmount14] [nvarchar](250) NULL,
	[FolderPreInputIndicator14] [nvarchar](250) NULL,
	[FolderId15] [nvarchar](250) NULL,
	[FolderAssetAmount15] [nvarchar](250) NULL,
	[FolderPreInputIndicator15] [nvarchar](250) NULL,
	[FolderId16] [nvarchar](250) NULL,
	[FolderAssetAmount16] [nvarchar](250) NULL,
	[FolderPreInputIndicator16] [nvarchar](250) NULL,
	[FolderId17] [nvarchar](250) NULL,
	[FolderAssetAmount17] [nvarchar](250) NULL,
	[FolderPreInputIndicator17] [nvarchar](250) NULL,
	[FolderId18] [nvarchar](250) NULL,
	[FolderAssetAmount18] [nvarchar](250) NULL,
	[FolderPreInputIndicator18] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Rep_AssetType](
	[PrimaryCode] [nvarchar](250) NOT NULL,
	[cat_plmt_t040] [nvarchar](250) NULL,
	[indc_esp] [nvarchar](250) NULL,
	[genr_avr] [nvarchar](250) NULL,
	[lib_40] [nvarchar](250) NULL,
	[regrp_est] [nvarchar](250) NULL,
	[cat_vtil1] [nvarchar](250) NULL,
	[cat_vtil2] [nvarchar](250) NULL,
	[cat_vtil3] [nvarchar](250) NULL,
	[cat_vtil4] [nvarchar](250) NULL,
	[cat_vtil5] [nvarchar](250) NULL,
	[cat_vtil6] [nvarchar](250) NULL,
	[cat_vtil7] [nvarchar](250) NULL,
	[cat_vtil8] [nvarchar](250) NULL,
	[no_libs_accs] [nvarchar](250) NULL,
	[vtil_sect_acvt] [nvarchar](250) NULL,
	[indc_cat_prc] [nvarchar](250) NULL,
	[cat_plmt_subs] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[typ_if_mifid] [nvarchar](250) NULL,
	[cd_vte_mifid] [nvarchar](250) NULL,
	[wcf_filler] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Rep_GeoView](
	[PrimaryCode] [nvarchar](250) NOT NULL,
	[ProductAccountId] [nvarchar](250) NULL,
	[SimulationReference] [nvarchar](250) NULL,
	[BreakdownDate] [nvarchar](250) NULL,
	[FolderNumber] [nvarchar](250) NULL,
	[BreakdownReferenceNumber] [nvarchar](250) NULL,
	[BreakdownType] [nvarchar](250) NULL,
	[ContentType] [nvarchar](250) NULL,
	[BreakdownTime] [nvarchar](250) NULL,
	[ConsolidationIndicator] [nvarchar](250) NULL,
	[GeoBreakdownIndicator] [nvarchar](250) NULL,
	[BreakdownIndicator6Currencies] [nvarchar](250) NULL,
	[MetalAccountIndicator] [nvarchar](250) NULL,
	[CautionCommitmentIndicator] [nvarchar](250) NULL,
	[PreInputOperationIndicator] [nvarchar](250) NULL,
	[BreakdownCurrency] [nvarchar](250) NULL,
	[BreakdownCurrency1] [nvarchar](250) NULL,
	[BreakdownCurrency2] [nvarchar](250) NULL,
	[BreakdownCurrency3] [nvarchar](250) NULL,
	[BreakdownCurrency4] [nvarchar](250) NULL,
	[BreakdownCurrency5] [nvarchar](250) NULL,
	[GeographicSectorId1] [nvarchar](250) NULL,
	[GeographicSectorAmount1] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator1] [nvarchar](250) NULL,
	[GeographicSectorId2] [nvarchar](250) NULL,
	[GeographicSectorAmount2] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator2] [nvarchar](250) NULL,
	[GeographicSectorId3] [nvarchar](250) NULL,
	[GeographicSectorAmount3] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator3] [nvarchar](250) NULL,
	[GeographicSectorId4] [nvarchar](250) NULL,
	[GeographicSectorAmount4] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator4] [nvarchar](250) NULL,
	[GeographicSectorId5] [nvarchar](250) NULL,
	[GeographicSectorAmount5] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator5] [nvarchar](250) NULL,
	[GeographicSectorId6] [nvarchar](250) NULL,
	[GeographicSectorAmount6] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator6] [nvarchar](250) NULL,
	[GeographicSectorId7] [nvarchar](250) NULL,
	[GeographicSectorAmount7] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator7] [nvarchar](250) NULL,
	[GeographicSectorId8] [nvarchar](250) NULL,
	[GeographicSectorAmount8] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator8] [nvarchar](250) NULL,
	[GeographicSectorId9] [nvarchar](250) NULL,
	[GeographicSectorAmount9] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator9] [nvarchar](250) NULL,
	[GeographicSectorId10] [nvarchar](250) NULL,
	[GeographicSectorAmount10] [nvarchar](250) NULL,
	[GeographicSectorPreInputIndicator10] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[Rep_SubPortfolios](
	[PrimaryCode] [nvarchar](250) NOT NULL,
	[ProductAccountId] [nvarchar](250) NULL,
	[FolderCode] [nvarchar](250) NULL,
	[FolderStatusCode] [nvarchar](250) NULL,
	[FolderTypeCode] [nvarchar](250) NULL,
	[ValuationDate] [nvarchar](250) NULL,
	[GrossValue] [nvarchar](250) NULL,
	[NetValue] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_Account](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ProductAccountId] [nvarchar](250) NULL,
	[Name] [nvarchar](250) NULL,
	[RelationshipManagerId] [nvarchar](250) NULL,
	[Currency] [nvarchar](250) NULL,
	[MandateType] [nvarchar](250) NULL,
	[PortfolioStrategy] [nvarchar](250) NULL,
	[LatestValueDate] [nvarchar](250) NULL,
	[NetTotalWealth] [nvarchar](250) NULL,
	[NetSecurityWealth] [nvarchar](250) NULL,
	[TotalInjection] [nvarchar](250) NULL,
	[TotalWithdrawal] [nvarchar](250) NULL,
	[BalanceSinceLastValueDate] [nvarchar](250) NULL,
	[PrimaryIntermediary] [nvarchar](250) NULL,
	[PortfolioManagerCode] [nvarchar](250) NULL,
	[IntermediaryFirm] [nvarchar](250) NULL,
	[BlockingCode] [nvarchar](250) NULL,
	[ValidFrom] [nvarchar](250) NULL,
	[ValidUntil] [nvarchar](250) NULL,
	[TWRPerformanceYTD] [nvarchar](250) NULL,
	[StatusCode] [nvarchar](250) NULL,
	[ConfidentialityCode] [nvarchar](250) NULL,
	[ExternalClientCode] [nvarchar](250) NULL,
	[MainBusinessRelationshipId] [nvarchar](250) NULL,
	[MWRPerformanceYTD] [nvarchar](250) NULL,
	[AssetType] [nvarchar](250) NULL,
	[TwrPerformanceCode] [nvarchar](250) NULL,
	[VIP] [nvarchar](250) NULL,
	[InvestmentTimeHorizon] [nvarchar](250) NULL,
	[VersionNumber] [nvarchar](250) NULL,
	[ClientCategory] [nvarchar](250) NULL,
	[GrossValue] [nvarchar](250) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[reasonForBlocking] [nvarchar](4000) NULL,
	[reasonForClosureCode] [nvarchar](100) NULL,
	[reasonForClosure] [nvarchar](4000) NULL,
	[FreeCashAmount] [nvarchar](250) NULL,
	[Dormant] [nvarchar](250) NULL,
	[Instructions] [nvarchar](250) NULL,
	[RegulatoryDomainCountryCode] [nvarchar](250) NULL,
	[ExpectedInflow] [nvarchar](250) NULL,
	[RiskLevelNetreveal] [nvarchar](250) NULL,
	[InvestmentCategory] [nvarchar](250) NULL,
	[MigrationOrigin] [nvarchar](250) NULL,
	[AccountOpeningChannel] [nvarchar](250) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Account_PrimaryCode ON BatchLoad_Source_Account (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Account_ProductAccountId ON BatchLoad_Source_Account (ProductAccountId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Account_MainBusinessRelationshipId ON BatchLoad_Source_Account (MainBusinessRelationshipId)
GO

CREATE TABLE [dbo].[BatchLoad_Source_CommercialContext](
	[PrimaryCode] [varchar](100) NOT NULL,
	[BusinessRelationshipId] [varchar](250) NULL,
	[Instructions] [varchar](250) NULL,
	[ExpectedInflow] [varchar](250) NULL,
	[ExpectedInflowCreationDate] [varchar](250) NULL,
	[EbankingFlag] [varchar](250) NULL,
	[InvestmentCategory] [varchar](250) NULL,
	[Segment] [varchar](250) NULL,
	[Dormant] [varchar](250) NULL,
	[MigrationOrigin] [varchar](250) NULL,
	[Currency] [varchar](250) NULL,
	[MainBusinessRelationshipId] [varchar](250) NULL,
	[GeneralCorrespondenceLanguageCode] [varchar](250) NULL,
	[Name] [varchar](250) NULL,
	[BeneficialOwnerCountryCode] [varchar](250) NULL,
	[BlockingCode] [varchar](250) NULL,
	[CommunicationLanguageCode] [varchar](250) NULL,
	[RegulatoryDomainCountryCode] [varchar](250) NULL,
	[RelationshipManagerId] [varchar](250) NULL,
	[ReportingLanguageCode] [varchar](250) NULL,
	[RiskLevel] [varchar](250) NULL,
	[RiskLevelNetreveal] [varchar](250) NULL,
	[RiskLevelNetrevealGroup] [varchar](250) NULL,
	[SizeCategory] [varchar](250) NULL,
	[StatusCode] [varchar](250) NULL,
	[ValidFrom] [varchar](250) NULL,
	[ValidUntil] [varchar](250) NULL,
	[VersionNumber] [varchar](250) NULL,
	[ClientCategory] [varchar](250) NULL,
	[Vip] [varchar](250) NULL,
	[PrimaryIntermediary] [varchar](250) NULL,
	[IntermediaryFirm] [varchar](250) NULL,
	[SecurityGroupCode] [varchar](250) NULL,
	[Activities] [varchar](250) NULL,
	[LegacyKey] [nvarchar](100) NULL,
	[GroupEntity] [nvarchar](250) NULL,
	[RiskLevelNetrevealGsf] [nvarchar](250) NULL,
	[MandatoryOfficialDocument] [nvarchar](250) NULL,
	[HomeAddressProof] [nvarchar](250) NULL,
	[ValidPowersMandates] [nvarchar](250) NULL,
	[CurrentProfessionalActivities] [nvarchar](250) NULL,
	[ProofIncomeAssets] [nvarchar](250) NULL,
	[CommercialStrategyAgreementPerson] [nvarchar](250) NULL,
	[ClientCategoryPrimaryCode] [nvarchar](250) NULL,
	[AccountOpeningChannel] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_CommercialContext_PrimaryCode ON BatchLoad_Source_CommercialContext (PrimaryCode)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_CommercialContext_BusinessRelationshipId ON BatchLoad_Source_CommercialContext (BusinessRelationshipId)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_CommercialContext_MainBusinessRelationshipId ON BatchLoad_Source_CommercialContext (MainBusinessRelationshipId)
GO


CREATE TABLE [dbo].[BatchLoad_Source_InformalPowerFile](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[partyAssociationId] [nvarchar](250) NULL,
	[no_indv_1] [nvarchar](250) NULL,
	[no_indv_2] [nvarchar](250) NULL,
	[typ_rel] [nvarchar](250) NULL,
	[dt_ouv] [nvarchar](250) NULL,
	[cd_etat] [nvarchar](250) NULL,
	[dt_mut] [nvarchar](250) NULL,
	[dt_clo] [nvarchar](250) NULL,
	[pers_ouv] [nvarchar](250) NULL,
	[pers_mut] [nvarchar](250) NULL,
	[pers_clo] [nvarchar](250) NULL
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_InformalPowerFile] ON [dbo].[BatchLoad_Source_InformalPowerFile]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE TABLE [dbo].[BatchLoad_Source_PowerType](

	[PrimaryCode] [nvarchar](100) NOT NULL,
	[ShortDescription] [nvarchar](250) NULL,
	[FlagOne] [nvarchar](250) NULL,
	[FlagTwo] [nvarchar](250) NULL,
	[CodeOne] [nvarchar](250) NULL,
	[CodeTwo] [nvarchar](250) NULL,
	[CodeThree] [nvarchar](250) NULL,
	[CodeFour] [nvarchar](250) NULL,
	[CodeFive] [nvarchar](250) NULL,
	[User] [nvarchar](250) NULL,
	[ModifiedDate] [nvarchar](250) NULL,
	[VersionNumber] [nvarchar](250) NULL,
	[OtherInformation] [nvarchar](250) NULL,
	[OtherInformationRaw] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Id] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Translation] [nvarchar](250) NULL
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_PowerType_PrimaryCode ON BatchLoad_Source_PowerType (PrimaryCode)
GO

CREATE TABLE [dbo].[BatchLoad_Powers_Config](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[Branch] [nvarchar](100) NOT NULL,
	[MasterCsv] [nvarchar](max) NULL,
	[DeltaCsv] [nvarchar](max) NULL,
	[Status] [int] NULL,
	[DataProcessed] [datetime] NULL,
	[Message] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IX_BatchLoad_Powers_Config_Id ON BatchLoad_Powers_Config (Id)
GO

CREATE TABLE [dbo].[BatchLoad_Source_WdxCommercialContext](
	[PrimaryCode] [nvarchar](100) NOT NULL,
	[accountid] [nvarchar](100) NULL,
	[wdx_pcode] [nvarchar](100) NULL
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_WdxCommercialContext_PrimaryCode ON BatchLoad_Source_WdxCommercialContext (PrimaryCode)
GO
CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_WdxCommercialContext_accountid ON BatchLoad_Source_WdxCommercialContext (accountid)
GO


CREATE NONCLUSTERED INDEX [IX_BatchLoad_Loader] ON [dbo].[BatchLoad_Loader]
(
	[OrchestratorId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Loader_Heap_LoaderName_PrimaryCode] ON [dbo].[BatchLoad_Loader_Heap]
(
	[LoaderName] ASC,
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_BusinessUnit] ON [dbo].[BatchLoad_Source_BusinessUnit]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_CESO] ON [dbo].[BatchLoad_Source_CESO]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ClientSubCategory] ON [dbo].[BatchLoad_Source_ClientSubCategory]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_CommercialGroup] ON [dbo].[BatchLoad_Source_CommercialGroup]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_CommercialGroupMember] ON [dbo].[BatchLoad_Source_CommercialGroupMember]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ContactPoint] ON [dbo].[BatchLoad_Source_ContactPoint]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Country] ON [dbo].[BatchLoad_Source_Country]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Currency] ON [dbo].[BatchLoad_Source_Currency]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_DKYC] ON [dbo].[BatchLoad_Source_DKYC]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_DocumentType] ON [dbo].[BatchLoad_Source_DocumentType]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ExchangeRate] ON [dbo].[BatchLoad_Source_ExchangeRate]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ExternalCustomerCode] ON [dbo].[BatchLoad_Source_ExternalCustomerCode]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_GedIntervenant] ON [dbo].[BatchLoad_Source_GedIntervenant]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_GedIndividual] ON [dbo].[BatchLoad_Source_GedIndividual]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_IdocProduct] ON [dbo].[BatchLoad_Source_IdocProduct]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_IdocParty] ON [dbo].[BatchLoad_Source_IdocParty]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDIVIDU] ON [dbo].[BatchLoad_Source_INDIVIDU]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_IndividualAddressType] ON [dbo].[BatchLoad_Source_IndividualAddressType]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDV_CMTR] ON [dbo].[BatchLoad_Source_INDV_CMTR]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDV_CPLM] ON [dbo].[BatchLoad_Source_INDV_CPLM]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDV_CPLM2] ON [dbo].[BatchLoad_Source_INDV_CPLM2]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDV_PAYS_ACVT] ON [dbo].[BatchLoad_Source_INDV_PAYS_ACVT]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INDV_QUEST_PAYS] ON [dbo].[BatchLoad_Source_INDV_QUEST_PAYS]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_InformalPower] ON [dbo].[BatchLoad_Source_InformalPower]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_INTV] ON [dbo].[BatchLoad_Source_INTV]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_InvestmentHorizon] ON [dbo].[BatchLoad_Source_InvestmentHorizon]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Language] ON [dbo].[BatchLoad_Source_Language]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_LastContactDate] ON [dbo].[BatchLoad_Source_LastContactDate]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ManagementProfile] ON [dbo].[BatchLoad_Source_ManagementProfile]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Organisation] ON [dbo].[BatchLoad_Source_Organisation]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Ownership] ON [dbo].[BatchLoad_Source_Ownership]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Party] ON [dbo].[BatchLoad_Source_Party]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_PartyTaxCountry] ON [dbo].[BatchLoad_Source_PartyTaxCountry]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Person] ON [dbo].[BatchLoad_Source_Person]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqPerp] ON [dbo].[BatchLoad_Source_AvqPerp]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqPerm] ON [dbo].[BatchLoad_Source_AvqPerm]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqBP] ON [dbo].[BatchLoad_Source_AvqBP]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqCont] ON [dbo].[BatchLoad_Source_AvqCont]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqShare] ON [dbo].[BatchLoad_Source_AvqShare]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqExpense] ON [dbo].[BatchLoad_Source_AvqExpens]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqIncome] ON [dbo].[BatchLoad_Source_AvqIncome]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqLiab] ON [dbo].[BatchLoad_Source_AvqLiab]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqP2prel] ON [dbo].[BatchLoad_Source_AvqP2prel]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_AvqAsset] ON [dbo].[BatchLoad_Source_AvqAsset]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_CountryAgreements] ON [dbo].[BatchLoad_Source_CountryAgreements]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_EAI] ON [dbo].[BatchLoad_Source_EAI]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ProductAccountInvestorProfiling] ON [dbo].[BatchLoad_Source_ProductAccountInvestorProfiling]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Provider] ON [dbo].[BatchLoad_Source_Provider]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ReferenceDataRemediation] ON [dbo].[BatchLoad_Source_ReferenceDataRemediation]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ReferenceDataType] ON [dbo].[BatchLoad_Source_ReferenceDataType]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_ResponsibleParty] ON [dbo].[BatchLoad_Source_ResponsibleParty]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_SUIVI_REL_CLI] ON [dbo].[BatchLoad_Source_SUIVI_REL_CLI]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_SystemUser] ON [dbo].[BatchLoad_Source_SystemUser]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Team] ON [dbo].[BatchLoad_Source_Team]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_BatchLoad_Source_Title] ON [dbo].[BatchLoad_Source_Title]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_Rep_AssetClass] ON [dbo].[Rep_AssetClass]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_Rep_AssetType] ON [dbo].[Rep_AssetType]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_Rep_GeoView] ON [dbo].[Rep_GeoView]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_Rep_SubPortfolios] ON [dbo].[Rep_SubPortfolios]
(
	[PrimaryCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Person_PartyId_IndvPauvre ON BatchLoad_Source_Person (PartyId, IndvPauvre)

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Person_LegacyKey ON BatchLoad_Source_Person (LegacyKey) INCLUDE (PrimaryCode)

CREATE NONCLUSTERED INDEX IX_BatchLoad_Source_Organisation_PartyId_IndvPauvre ON BatchLoad_Source_Organisation (PartyId, IndvPauvre)

CREATE NONCLUSTERED INDEX IX_BatchLoad_Loader_Staging_Branch ON BatchLoad_Loader_Staging (LoaderName, PrimaryCode, Branch)
CREATE NONCLUSTERED INDEX IX_BatchLoad_Loader_Staging_ProcessedStatus ON BatchLoad_Loader_Staging (ProcessedStatus)



ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_CreatedOn]  DEFAULT (GETUTCDATE()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_ModifiedOn]  DEFAULT (GETUTCDATE()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_LoadedIntoHeap]  DEFAULT ((0)) FOR [LoadedIntoHeap]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_ReadyForProcessingInStaging]  DEFAULT ((0)) FOR [ReadyForProcessingInStaging]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_LoadedIntoWdxSuccess]  DEFAULT ((0)) FOR [LoadedIntoWdxSuccess]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_LoadedIntoWdxError]  DEFAULT ((0)) FOR [LoadedIntoWdxError]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_UnparseableRecordsNotLoadedIntoHeap]  DEFAULT ((0)) FOR [UnparseableRecordsNotLoadedIntoHeap]
GO
ALTER TABLE [dbo].[BatchLoad_Loader] ADD  CONSTRAINT [DF_BatchLoad_Loader_CorruptedRecordsLoadedIntoHeap]  DEFAULT ((0)) FOR [CorruptedRecordsLoadedIntoHeap]
GO
ALTER TABLE [dbo].[BatchLoad_Loader_Staging] ADD  CONSTRAINT [DF_BatchLoad_Loader_Record_Staging_CreatedOn]  DEFAULT (GETUTCDATE()) FOR [CreatedOn]
GO
ALTER TABLE [dbo].[BatchLoad_Loader_Staging] ADD  CONSTRAINT [DF_BatchLoad_Loader_Record_Staging_ModifiedOn]  DEFAULT (GETUTCDATE()) FOR [ModifiedOn]
GO
ALTER TABLE [dbo].[BatchLoad_Loader_Staging] ADD  CONSTRAINT [DF_BatchLoad_Loader_Staging_Priority]  DEFAULT ((1)) FOR [Priority]
GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_CalculateBranches]
AS
BEGIN
	SET NOCOUNT ON


	-- Reset Branch on all staged records except for the deleted ones
	-- (Branch is calculated based on source tables and deleted records wouldn't be there anymore hence, Branch would never be populated on those)
	UPDATE BatchLoad_Loader_Staging SET Branch = NULL WHERE DeletedOn IS NULL


	-- CommercialContext
	UPDATE s 
	SET s.Branch = br.MainBusinessRelationshipId
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_CommercialContext br
			ON s.PrimaryCode = br.PrimaryCode
		LEFT OUTER JOIN BatchLoad_Filter f
			ON br.MainBusinessRelationshipId = f.Branch
	WHERE s.LoaderName = 'CommercialContext'
	AND br.BusinessRelationshipId = br.MainBusinessRelationshipId
	AND (f.Branch IS NOT NULL OR (NOT EXISTS (SELECT TOP 1 Branch FROM BatchLoad_Filter WHERE Branch IS NOT NULL)))


	-- Account
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_Account a
			ON s.PrimaryCode = a.PrimaryCode
		JOIN BatchLoad_Source_CommercialContext cc
			ON a.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN BatchLoad_Loader_Staging m
			ON cc.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'Account'
	AND m.LoaderName = 'CommercialContext'

	--ProductAccountInvestorProfiling
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'ProductAccountInvestorProfiling'
	AND m.LoaderName = 'Account'

	-- Person and Organisation (based on FormalPower or InformalPower)
	-- If no FormalPower or InformalPower
	UPDATE s 
	SET s.Branch = CASE WHEN m.Branch IS NOT NULL THEN m.Branch ELSE 'Party' + s.PrimaryCode END 
	FROM BatchLoad_Loader_Staging s
		LEFT JOIN v_BatchLoad_PartyBranch br
			ON s.PrimaryCode = br.PartyId
		LEFT JOIN BatchLoad_Loader_Staging m
			ON br.Branch = m.Branch
	WHERE s.LoaderName IN ('Person', 'Organisation')


	-- FormalPower 
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_FormalPower fp
			ON s.PrimaryCode = fp.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON fp.MainBusinessRelationshipId = m.PrimaryCode
	WHERE s.LoaderName = 'FormalPower'
	AND m.LoaderName = 'CommercialContext'


	-- InformalPower
	UPDATE s 
	SET s.Branch = m1.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_InformalPower ip
			ON s.PrimaryCode = ip.PrimaryCode
		JOIN BatchLoad_Loader_Staging m1
			ON ip.no_indv_1 = m1.PrimaryCode
		JOIN BatchLoad_Loader_Staging m2
			ON ip.no_indv_2 = m2.PrimaryCode
	WHERE s.LoaderName = 'InformalPower'
	AND m1.LoaderName IN ('Person', 'Organisation')
	AND m2.LoaderName IN ('Person', 'Organisation')


	-- CommercialGroupMember
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON s.PrimaryCode = cgm.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON cgm.PartyId = m.PrimaryCode
	WHERE s.LoaderName = 'CommercialGroupMember'
	AND m.LoaderName IN ('Person', 'Organisation')

	
	-- CommercialGroup
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON s.PrimaryCode = cgm.CommercialGroupId
		JOIN BatchLoad_Loader_Staging m
			ON cgm.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'CommercialGroup'
	AND m.LoaderName = 'CommercialGroupMember'


	-- ContactPoint
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_ContactPoint t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.PartyId = m.PrimaryCode
	WHERE s.LoaderName = 'ContactPoint'
	AND m.LoaderName IN ('Person', 'Organisation')


	-- INDV_QUEST_PAYS
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_INDV_QUEST_PAYS t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.NO_INDV = m.PrimaryCode
	WHERE s.LoaderName = 'INDV_QUEST_PAYS'
	AND m.LoaderName IN ('Person', 'Organisation')


	-- INDV_PAYS_ACVT
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_INDV_PAYS_ACVT t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.NO_INDV = m.PrimaryCode
	WHERE s.LoaderName = 'INDV_PAYS_ACVT'
	AND m.LoaderName IN ('Person', 'Organisation')


	-- Party
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'Party'
	AND m.LoaderName IN ('Person', 'Organisation')


	-- Other Party related where PrimaryCode is the same as PartyId
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName IN ('INDIVIDU', 'INDV_CPLM2', 'INDV_CPLM', 'CESO', 'AVQPERP', 'AVQPERM')
	AND m.LoaderName IN ('Person', 'Organisation')


	-- SUIVI_REL_CLI
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_SUIVI_REL_CLI t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.NO_INTV = m.PrimaryCode
	WHERE s.LoaderName = 'SUIVI_REL_CLI'
	AND m.LoaderName = 'Account'


	-- GEDIntervenant
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_GedIntervenant t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.NOCLI = m.PrimaryCode
	WHERE s.LoaderName = 'GedIntervenant'
	AND m.LoaderName = 'Account'

	-- GEDIndividual
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_GedIndividual t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.NOINDIVIDU = m.PrimaryCode
	WHERE s.LoaderName = 'GedIndividual'
	AND m.LoaderName IN ('Person', 'Organisation')

	-- IDOCProduct
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_IdocProduct t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.no_intv = m.PrimaryCode
	WHERE s.LoaderName = 'IdocProduct'
	AND m.LoaderName = 'Account'

	-- IDOCParty
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_IdocParty t
			ON s.PrimaryCode = t.PrimaryCode
		JOIN BatchLoad_Loader_Staging m
			ON t.no_indv = m.PrimaryCode
	WHERE s.LoaderName = 'IdocParty'
	AND m.LoaderName IN ('Person', 'Organisation')

	-- Other Intervenant related where PrimaryCode is the same as NO_INTV
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName IN ('INTV', 'LastContactDate')
	AND m.LoaderName = 'Account'

	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON REPLACE(s.PrimaryCode, 'False', '') = m.PrimaryCode
	WHERE s.LoaderName IN ('DKYC')
	AND m.LoaderName = 'Account'

	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON REPLACE(s.PrimaryCode, 'True', '') = m.PrimaryCode
	WHERE s.LoaderName IN ('DKYC')
	AND m.LoaderName IN ('Person', 'Organisation')

	
	-- Contact ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'contact_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName IN ('Person', 'Organisation')

	-- InformalPower ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'connection_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'InformalPower'

	-- CommercialGroup ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'clientgroup_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'CommercialGroup'

	-- CommercialGroupMember ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'connection_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'CommercialGroupMember'

	-- Account ownerships (security exceptions)
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'client_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'CommercialContext'

	-- Portfolio ownerships (security exceptions)
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'wdx_portfolio_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'Account'

	-- Connection ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			-- Assumes that PartyId and BusinessRelationshipId lengths are 9 and 7
			ON SUBSTRING(s.PrimaryCode, 22, 7) = m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND s.PrimaryCode LIKE 'connection_%'
	AND s.PrimaryCode NOT LIKE '%_Member'
	AND m.LoaderName = 'CommercialContext'

	-- Linked Contact ownerships
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = 'wdx_linkedcontact_' + m.PrimaryCode
	WHERE s.LoaderName = 'Ownership'
	AND m.LoaderName = 'FormalPower'

	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN (
			SELECT 
				fp.PrimaryCode AS PrimaryCode,
				fp.PartyId + '_' + fp.MainBusinessRelationshipId + '_' + m2.WDXValue AS ConnectionPrimaryCode,
				s.Branch
			FROM BatchLoad_Loader_Staging s
			JOIN BatchLoad_Source_FormalPower fp
				ON s.PrimaryCode = fp.PrimaryCode
			JOIN BatchLoad_Mapping m1
				ON fp.RoleTypeCode = m1.S2iValue
				AND m1.MappingType = 'ConnectionRoleTypeInbound'
			JOIN BatchLoad_Mapping m2
				ON m1.S2iValue = m2.WDXValue
				AND m2.MappingType = 'ConnectionRoleTypeOutbound'
		) m
			ON s.PrimaryCode = 'connection_' + m.ConnectionPrimaryCode
	WHERE s.LoaderName = 'Ownership'

	-- Avaloq Business Partner
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQBP'
	AND m.LoaderName = 'CommercialContext'

	-- Avaloq Container
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQCONT'
	AND m.LoaderName = 'Account'

	-- Avaloq Assets
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_AVQASSET a
			ON s.PrimaryCode = a.PrimaryCode
		JOIN BatchLoad_Source_Person p
			ON a.ASSETS_FUNCTIONALKEY = p.LegacyKey
		JOIN BatchLoad_Loader_Staging m
			ON p.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQASSET'
	  AND m.LoaderName = 'Person'

	-- Avaloq Liabilities
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_AVQLIAB a
			ON s.PrimaryCode = a.PrimaryCode
		JOIN BatchLoad_Source_Person p
			ON a.LIAB_FUNCTIONALKEY = p.LegacyKey
		JOIN BatchLoad_Loader_Staging m
			ON p.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQLIAB'
	  AND m.LoaderName = 'Person'

	-- Avaloq Incomes
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_AVQINCOME a
			ON s.PrimaryCode = a.PrimaryCode
		JOIN BatchLoad_Source_Person p
			ON a.INCOME_FUNCTIONALKEY = p.LegacyKey
		JOIN BatchLoad_Loader_Staging m
			ON p.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQINCOME'
	  AND m.LoaderName = 'Person'

	-- Avaloq Expenses
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Loader_Staging m
			ON s.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQEXPENS'
	  AND m.LoaderName = 'Person'

	-- Avaloq Bearer Share Custody
	UPDATE s 
	SET s.Branch = m.Branch
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_AVQSHARE a
			ON s.PrimaryCode = a.PrimaryCode 
		LEFT JOIN BatchLoad_Loader_Staging m
			ON a.PrimaryCode = m.PrimaryCode  
	WHERE s.LoaderName = 'AVQSHARE'
	  AND m.LoaderName in ( 'Person', 'Organisation')

   -- Avaloq Introducer
	UPDATE s 
	SET s.Branch = m.Branch 
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Source_AVQP2PREL a
			ON s.PrimaryCode = a.PrimaryCode
		JOIN BatchLoad_Source_Organisation p
			ON ( a.AVP2P_SOURCE = p.LegacyKey OR a.AVP2P_TARGET = p.LegacyKey)
		JOIN BatchLoad_Loader_Staging m
			ON p.PrimaryCode = m.PrimaryCode
	WHERE s.LoaderName = 'AVQP2PREL'
	  AND m.LoaderName = 'Organisation'


	-- Clear 'Ignore' before we recalculate it
	UPDATE BatchLoad_Loader_Staging 
	SET ProcessedStatus = NULL 
	WHERE ProcessedStatus = 'Ignore'

	IF (EXISTS (SELECT TOP 1 * FROM BatchLoad_Filter WHERE Branch IS NOT NULL)) BEGIN

		-- Ignore everything by default except for deleted records
		UPDATE s
		SET ProcessedStatus = 'Ignore'
		FROM BatchLoad_Loader_Staging s
			JOIN BatchLoad_Loader_Type t
				ON s.LoaderName = t.LoaderName
		WHERE (ProcessedStatus IS NULL OR ProcessedStatus NOT IN ('Success', 'Warning', 'Error'))
		AND IsFiltered = 1
		AND DeletedOn IS NULL
			

		-- Allow only records as per the filter table and for the loaders that are enabled
		UPDATE s
		SET ProcessedOn            = NULL,
			ProcessedStatus        = NULL,
			ProcessedStatusDetails = NULL,
			ProcessedTrace		   = NULL
		FROM BatchLoad_Loader_Staging s
			JOIN BatchLoad_Filter f
				ON s.Branch = f.Branch 
			JOIN BatchLoad_Loader_Type t
				ON s.LoaderName = t.LoaderName
		WHERE s.ProcessedStatus = 'Ignore'
		AND t.IsFiltered = 1

	END 

	-- Exclude users as per the filter table
	UPDATE s
	SET ProcessedStatus = 'Ignore'
	FROM BatchLoad_Loader_Staging s
		JOIN BatchLoad_Filter f
			ON s.PrimaryCode = f.UserToExclude 
	WHERE s.LoaderName = 'SystemUser'

END
GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_CalculatePriority]
AS
BEGIN
	SET NOCOUNT ON

	-- Priority 1  Default (see sp_BatchLoad_PopulateStaging)
	-- Priority 2  Records where only secondary attributes have changed (see sp_BatchLoad_PopulateStaging)
	-- Priority 10 Person and Organisation records (and all their corresponding records (KYC, CESO...)) not related to BR/PA via at least one FormalPower
	-- Priority 20 Contact Ownership records for large structures with large number of principals to share with (see the Ownership loader)
	UPDATE BatchLoad_Loader_Staging SET Priority = 1 WHERE Priority = 10
	UPDATE BatchLoad_Loader_Staging SET Priority = 10 WHERE Branch LIKE 'Party%'
	UPDATE BatchLoad_Loader_Staging SET Priority = 21 WHERE LoaderName = 'EAI'
	UPDATE BatchLoad_Loader_Staging SET Priority = 22 WHERE LoaderName = 'CountryAgreements'
	UPDATE BatchLoad_Loader_Staging SET Priority = 23 WHERE LoaderName = 'ContactsForCRSRecalc'
END
GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_CalculateStatus]
AS
BEGIN
	SET NOCOUNT ON;

	-- Fast way to disqualify records at very early stages of the batch load process


	-- Reset statuses set by this stored procedure first
	UPDATE BatchLoad_Loader_Staging 
	SET ProcessedStatus = NULL,
		ProcessedStatusDetails = NULL,
		ProcessedOn = NULL
	WHERE ProcessedStatusDetails IN (
		'Missing Person/Organisation',
		'Missing CommercialContext',
		'Missing Account',
		'Missing CommercialGroup',
		'Empty LastName',
		'Error on corresponding Person/Organisation',
		'Missing Person',
		'Missing Organisation',
		'Error on corresponding Person',
		'Error on corresponding Organisation',
		'Error on corresponding CommercialContext',
		'Error on corresponding Account', 
		'Duplicate Legacy Keys in Account',
		'Duplicate Legacy Keys in Organisation',
		'Duplicate Legacy Keys in Person',
		'Duplicate Legacy Keys in CommercialContext',
		'Not Introducer',
		'Ignore - Missing CommercialContext'
	)
	AND ProcessedStatus = 'Error'

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
	WHERE s1.LoaderName IN ('INDIVIDU', 'INDV_CPLM', 'INDV_CPLM2')
	AND s1.PrimaryCode NOT IN
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName IN ('Person', 'Organisation')
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_FormalPower fp
			ON s1.PrimaryCode = fp.PrimaryCode
	WHERE s1.LoaderName = 'FormalPower'
	AND fp.PartyId NOT IN
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName IN ('Person', 'Organisation')
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_FormalPower fp
			ON s1.PrimaryCode = fp.PrimaryCode
	WHERE s1.LoaderName = 'FormalPower'
	AND fp.MainBusinessRelationshipId NOT IN
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName = 'CommercialContext'
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Account', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_FormalPower fp
			ON s1.PrimaryCode = fp.PrimaryCode
	WHERE s1.LoaderName = 'FormalPower'
	AND fp.BusinessRelationshipId NOT IN
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName = 'Account'
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_Account pa 
			ON s1.PrimaryCode = pa.PrimaryCode
	WHERE s1.LoaderName = 'Account'
	AND pa.MainBusinessRelationshipId NOT IN (SELECT DISTINCT br.BusinessRelationshipId FROM BatchLoad_Source_CommercialContext br)
	AND s1.ProcessedStatus IS NULL

    UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialGroup', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON s1.PrimaryCode = cgm.PrimaryCode
	WHERE s1.LoaderName = 'CommercialGroupMember'
	AND cgm.CommercialGroupId NOT IN 
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName IN ('CommercialGroup')
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON s1.PrimaryCode = cgm.PrimaryCode
	WHERE s1.LoaderName = 'CommercialGroupMember'			
	AND cgm.PartyId NOT IN 
	(
		SELECT s2.PrimaryCode FROM BatchLoad_Loader_Staging s2 WHERE s2.LoaderName IN ('Person', 'Organisation')
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Empty LastName', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_Person p
			ON s1.PrimaryCode = p.PrimaryCode
	WHERE s1.LoaderName = 'Person'			
	AND (p.LastName IS NULL OR RTRIM(LTRIM(p.LastName)) = '')
	AND s1.ProcessedStatus IS NULL



	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Loader_Staging s2
			ON s1.PrimaryCode = s2.PrimaryCode
	WHERE s1.LoaderName IN ('INDIVIDU', 'INDV_CPLM', 'INDV_CPLM2')
	AND s2.LoaderName IN ('Person', 'Organisation')
	AND s2.ProcessedStatus = 'Error'
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_ContactPoint c
			ON s1.PrimaryCode = c.PrimaryCode
		JOIN BatchLoad_Loader_Staging s2
			ON c.PartyId = s2.PrimaryCode
	WHERE s1.LoaderName = 'ContactPoint'
	AND s2.LoaderName IN ('Person', 'Organisation')
	AND s2.ProcessedStatus = 'Error'
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_Ownership o
			ON s1.PrimaryCode = o.PrimaryCode
		JOIN BatchLoad_Loader_Staging s2
			ON o.TargetPrimaryCode = s2.PrimaryCode
	WHERE s1.LoaderName = 'Ownership'
	AND o.TargetType = 'contact'
	AND s2.LoaderName IN ('Person', 'Organisation')
	AND s2.ProcessedStatus = 'Error'
	AND s1.ProcessedStatus IS NULL

	--AVQBP
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqBP c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQBP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVBP_FUNCTIONALKEY NOT IN
	(
	 select legacyKey from Batchload_Source_CommercialContext
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqBP c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQBP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVBP_FUNCTIONALKEY IN
	(
	 select legacyKey 
	   from Batchload_Source_CommercialContext p
	   join BatchLoad_Loader_Staging s on s.PrimaryCode = p.PrimaryCode
	        and s.LoaderName = 'CommercialContext'
			and s.ProcessedStatus = 'Error'
	)
	
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqBP c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQBP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVBP_FUNCTIONALKEY IN
	(
	 SELECT p2.LegacyKey FROM Batchload_Source_CommercialContext p2 
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)
	---AVQCONT
    UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Account', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqCont c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQCONT' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVCONT_FUNCTIONALKEY NOT IN
	(
	 select legacyKey from Batchload_Source_Account
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Account', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqCont c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQCONT' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVCONT_FUNCTIONALKEY IN
	(
	 select legacyKey 
	   from Batchload_Source_Account p
	   join BatchLoad_Loader_Staging s on s.PrimaryCode = p.PrimaryCode
	        and s.LoaderName = 'Account'
			and s.ProcessedStatus = 'Error'
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Account', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqCont c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQCONT' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVCONT_FUNCTIONALKEY IN
	(
	  SELECT p2.LegacyKey FROM Batchload_Source_Account p2 
      GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	---AVQPERM
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerm c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERM' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPM_FUNCTIONALKEY NOT IN
	(
	 select legacyKey from Batchload_Source_Organisation
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerm c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERM' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPM_FUNCTIONALKEY IN
	(
	 select legacyKey 
	   from Batchload_Source_Organisation p
	   join BatchLoad_Loader_Staging s on s.PrimaryCode = p.PrimaryCode
	        and s.LoaderName = 'Organisation'
			and s.ProcessedStatus = 'Error'
	) 

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerm c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERM' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPM_FUNCTIONALKEY IN
	(
	 SELECT p2.LegacyKey FROM Batchload_Source_Organisation p2 
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)
	---AVQPERP
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerp c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPP_FUNCTIONALKEY NOT IN
	(
	 select legacyKey from Batchload_Source_Person
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Error on corresponding Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerp c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPP_FUNCTIONALKEY  IN
	(
	 select legacyKey 
	   from Batchload_Source_Person p
	   join BatchLoad_Loader_Staging s on s.PrimaryCode = p.PrimaryCode
	        and s.LoaderName = 'Person'
			and s.ProcessedStatus = 'Error'
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AvqPerp c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQPERP' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVPP_FUNCTIONALKEY  IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	-- AVQASSET
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQASSET c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQASSET' 
	AND s1.ProcessedStatus IS NULL
	AND c.ASSETS_FUNCTIONALKEY IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

    -- AVQSHARE
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQSHARE c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQSHARE' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVSH_FUNCTIONALKEY  NOT IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
	 union
	 SELECT o2.LegacyKey FROM BatchLoad_Source_Organisation o2
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQSHARE c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQSHARE' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVSH_FUNCTIONALKEY  IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	--AVQEXPENSE
		UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQEXPENS c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQEXPENS' 
	AND s1.ProcessedStatus IS NULL
	AND c.EXPENS_FUNCTIONALKEY  IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	-- AVQINCOME
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQINCOME c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQINCOME' 
	AND s1.ProcessedStatus IS NULL
	AND c.INCOME_FUNCTIONALKEY IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	--AVQP2PREL
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQP2PREL c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQP2PREL' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVP2P_TARGET IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	--AVQP2PREL
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Not Introducer', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQP2PREL c
			ON s1.PrimaryCode = c.PrimaryCode and c.AVP2P_SUBTYPE != 'is_introducer'
	WHERE s1.LoaderName = 'AVQP2PREL' 
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQP2PREL c
			ON s1.PrimaryCode = c.PrimaryCode and c.AVP2P_SUBTYPE = 'is_introducer'
	WHERE s1.LoaderName = 'AVQP2PREL' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVP2P_TARGET NOT IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2 
	 union
	 SELECT o.LegacyKey FROM BatchLoad_Source_Organisation o
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Person/Organisation', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQP2PREL c
			ON s1.PrimaryCode = c.PrimaryCode and c.AVP2P_SUBTYPE = 'is_introducer'
	WHERE s1.LoaderName = 'AVQP2PREL' 
	AND s1.ProcessedStatus IS NULL
	AND c.AVP2P_SOURCE NOT IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2 
	 union
	 SELECT o.LegacyKey FROM BatchLoad_Source_Organisation o
	)
	
	--AVQLIAB
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Duplicate Legacy Keys in Person', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_AVQLIAB c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'AVQLIAB' 
	AND s1.ProcessedStatus IS NULL
	AND c.LIAB_FUNCTIONALKEY  IN
	(
	 SELECT p2.LegacyKey FROM BatchLoad_Source_Person p2
    GROUP BY p2.LegacyKey HAVING count(1) > 1
	)

	-- ProductAccountInvestorProfiling
	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing Account', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_ProductAccountInvestorProfiling c
			ON s1.PrimaryCode = c.PrimaryCode
	WHERE s1.LoaderName = 'ProductAccountInvestorProfiling' 
	AND s1.ProcessedStatus IS NULL
	AND c.PrimaryCode  NOT IN
	(
	 SELECT p2.PrimaryCode FROM BatchLoad_Source_Account p2
	)

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_SUIVI_REL_CLI s
			ON s1.PrimaryCode = s.PrimaryCode
	WHERE s1.LoaderName = 'SUIVI_REL_CLI'
	AND s.NO_INTV NOT IN 
	(
		SELECT PrimaryCode FROM BatchLoad_Loader_Staging WHERE LoaderName = 'CommercialContext'
	)
	AND s.NO_INTV NOT IN
	(
		SELECT PrimaryCode FROM BatchLoad_Loader_Staging WHERE LoaderName = 'Account'
	)
	AND s1.ProcessedStatus IS NULL

	UPDATE s1
	SET s1.ProcessedStatus = 'Error', s1.ProcessedStatusDetails = 'Missing CommercialContext', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
		JOIN BatchLoad_Source_INTV s
			ON s1.PrimaryCode = s.PrimaryCode
	WHERE s1.LoaderName = 'INTV'
	AND s.NO_INTV NOT IN 
	(
		SELECT PrimaryCode FROM BatchLoad_Loader_Staging WHERE LoaderName = 'CommercialContext'
	)
	AND s.NO_INTV NOT IN
	(
		SELECT PrimaryCode FROM BatchLoad_Loader_Staging WHERE LoaderName = 'Account'
	)
	AND s1.ProcessedStatus IS NULL

	-- IWM-5791 Prevent creation of CommercialContext (and related records) where no A/H exists
	UPDATE BatchLoad_Loader_Staging 
	SET ProcessedStatus = NULL, ProcessedStatusDetails = NULL, ProcessingOn = NULL, ProcessedOn = NULL, ProcessedTrace = NULL, ProcessedBy = NULL
	WHERE ProcessedStatus = 'Ignore'
	AND ProcessedStatusDetails LIKE 'No A/H FormalPower%'

	UPDATE s1
	SET ProcessedStatus = 'Ignore', s1.ProcessedStatusDetails = 'No A/H FormalPower and not in WDX', s1.ProcessingOn = GETUTCDATE(), s1.ProcessedOn = GETUTCDATE(), s1.ProcessedTrace = NULL, s1.ProcessedBy = NULL
	FROM BatchLoad_Loader_Staging s1
	WHERE (s1.LoaderName IN ('CommercialContext', 'Account', 'INTV', 'SUIVI_REL_CLI', 'ProductAccountInvestorProfiling', 'FormalPower') OR (s1.LoaderName = 'Ownership' AND (s1.PrimaryCode LIKE 'client%' OR s1.PrimaryCode LIKE 'wdx_portfolio%')))
	AND s1.Branch IN 
	(
		SELECT DISTINCT s.Branch
		FROM BatchLoad_Loader_Staging s
			JOIN BatchLoad_Source_CommercialContext cc
				ON s.PrimaryCode = cc.PrimaryCode
		WHERE s.LoaderName = 'CommercialContext'
		AND cc.MainBusinessRelationshipId NOT IN (
			SELECT DISTINCT MainBusinessRelationshipId 
			FROM BatchLoad_Source_FormalPower 
			WHERE RoleTypeCode IN (
				SELECT RoleType 
				FROM BatchLoad_AccountOwner_RoleType
			)
		)
	)
	AND s1.Branch NOT IN -- Don't ignore records that are already in WDX
	(
		SELECT DISTINCT wdx_pcode FROM BatchLoad_Source_WdxCommercialContext
	)

END
GO

CREATE procedure [dbo].[sp_BatchLoad_CalculateSecurityExceptions]
AS
BEGIN
	SET NOCOUNT ON;

	-- Populate the BatchLoad_Source_SecurityException table with all types of exceptions
	-- Break down User Profiles into Users

	-- Remove invalid entries from the AccessRight set
	DELETE FROM BatchLoad_Source_AccessRight WHERE T_CRIT1 IS NULL OR LTRIM(RTRIM(T_CRIT1)) = ''

	-- Delete all Security Exceptions first
	DELETE FROM BatchLoad_Source_SecurityException
	
    -- Filter AccessRight exceptions
    DROP TABLE IF EXISTS #AccessRight
    CREATE TABLE #AccessRight
    (
        C_TYPE_INFO NVARCHAR(250),
        C_TYPE_ACT NVARCHAR(250),
        C_USERID NVARCHAR(250),
        T_CRIT1 NVARCHAR(250),
        T_CRIT2 NVARCHAR(250),
        IsUserExplicit BIT
    )
    -- User specific exceptions
    INSERT INTO #AccessRight
    SELECT 
        C_TYPE_INFO,
        C_TYPE_ACT,
        C_USERID, 
        T_CRIT1,
        T_CRIT2,
        1
    FROM BatchLoad_Source_AccessRight t
    WHERE C_USERID NOT LIKE '$%' AND C_USERID NOT LIKE '!%' -- User explicit
    AND C_SI = 'CL'
    AND 
    (
        (C_TYPE_INFO IN ('DPT', 'SIESE') AND C_TYPE_ACT IN ('IN')) -- OG = access interdiction
        OR
        (C_TYPE_INFO = 'CDRAC' AND C_TYPE_ACT = 'IN' AND ISNUMERIC(T_CRIT1) = 1 AND ISNUMERIC(T_CRIT2) = 1)
        OR
        (C_TYPE_INFO IN ('ITGES', 'TYPGE') AND C_TYPE_ACT = 'IN')
    )   
    AND T_CRIT1 IS NOT NULL AND LTRIM(RTRIM(T_CRIT1)) <> ''
    -- Profile specific exceptions
    INSERT INTO #AccessRight
    SELECT 
        t.C_TYPE_INFO,
        t.C_TYPE_ACT,
        p.UserId as [C_USERID], 
        t.T_CRIT1,
        t.T_CRIT2,
        0
    FROM BatchLoad_Source_AccessRight t
        JOIN v_BatchLoad_Security_ProfileUser p
            ON t.C_USERID = p.ProfileCode
        LEFT OUTER JOIN #AccessRight a
            ON a.C_USERID = p.UserId
    WHERE (t.C_USERID LIKE '$%' OR t.C_USERID LIKE '!%') -- Profile specific
    AND C_SI = 'CL'
    AND 
    (
        (t.C_TYPE_INFO IN ('DPT', 'SIESE') AND t.C_TYPE_ACT IN ('IN')) -- OG = access interdiction
        OR
        (t.C_TYPE_INFO = 'CDRAC' AND t.C_TYPE_ACT = 'IN' AND ISNUMERIC(t.T_CRIT1) = 1 AND ISNUMERIC(t.T_CRIT2) = 1)
        OR
        (t.C_TYPE_INFO IN ('ITGES', 'TYPGE') AND t.C_TYPE_ACT = 'IN')
    )
    AND t.T_CRIT1 IS NOT NULL AND LTRIM(RTRIM(t.T_CRIT1)) <> ''
    AND a.C_USERID IS NULL -- Don't incude profile records if there are any user records 
	-- New Intervenant Exceptions in the latest load
	INSERT INTO BatchLoad_Source_SecurityException (C_TYPE_INFO, C_SI, C_USERID, T_CRIT1, T_CRIT2, IsUserExplicit)
	SELECT 
        C_TYPE_INFO,
        C_TYPE_ACT,
        C_USERID,
        T_CRIT1,
        T_CRIT2,
        IsUserExplicit
    FROM #AccessRight
    WHERE C_TYPE_INFO = 'CDRAC'

	UPDATE BatchLoad_Source_SecurityException
	SET RangeSize = COALESCE((TRY_CONVERT(INT, T_CRIT2) - TRY_CONVERT(INT, T_CRIT1) + 1), 1)
	WHERE C_TYPE_INFO = 'CDRAC'



	    -- All Department Exceptions
    INSERT INTO BatchLoad_Source_SecurityException (C_TYPE_INFO, C_SI, C_USERID, T_CRIT1, T_CRIT2, IsUserExplicit, RangeSize)
    SELECT 
        C_TYPE_INFO,
        C_TYPE_ACT,
        C_USERID,
        T_CRIT1,
        T_CRIT2,
        IsUserExplicit,
        COUNT(d.GTB_CDE)
    FROM #AccessRight e
        JOIN BatchLoad_Source_Department d
            ON d.GTB_CDE BETWEEN e.T_CRIT1 AND e.T_CRIT2
    WHERE C_TYPE_INFO = 'DPT'
    GROUP BY
        e.C_TYPE_INFO,
        e.C_TYPE_ACT,
        e.C_USERID,
        e.T_CRIT1,
        e.T_CRIT2,
        IsUserExplicit



    -- All Segment Exceptions
    INSERT INTO BatchLoad_Source_SecurityException (C_TYPE_INFO, C_SI, C_USERID, T_CRIT1, T_CRIT2, IsUserExplicit, RangeSize)
    SELECT 
        C_TYPE_INFO,
        C_TYPE_ACT,
        C_USERID,
        T_CRIT1,
        T_CRIT2,
        IsUserExplicit,
        COUNT(s.GTB_CDE)
    FROM #AccessRight e
        JOIN BatchLoad_Source_Segment s
            ON s.GTB_CDE BETWEEN e.T_CRIT1 AND e.T_CRIT2
    WHERE C_TYPE_INFO = 'SIESE'
    GROUP BY
        e.C_TYPE_INFO,
        e.C_TYPE_ACT,
        e.C_USERID,
        e.T_CRIT1,
        e.T_CRIT2,
        IsUserExplicit



	-- All Service Type Exceptions
    INSERT INTO BatchLoad_Source_SecurityException (C_TYPE_INFO, C_SI, C_USERID, T_CRIT1, T_CRIT2, IsUserExplicit, RangeSize)
    SELECT 
        C_TYPE_INFO,
        C_TYPE_ACT,
        C_USERID,
        T_CRIT1,
        T_CRIT2,
        IsUserExplicit,
        COUNT(m.S2iValue)
    FROM #AccessRight e
        JOIN BatchLoad_Mapping m
            ON m.S2iValue BETWEEN e.T_CRIT1 AND e.T_CRIT2
    WHERE C_TYPE_INFO IN ('ITGES', 'TYPGE')
    GROUP BY
        e.C_TYPE_INFO,
        e.C_TYPE_ACT,
        e.C_USERID,
        e.T_CRIT1,
        e.T_CRIT2,
        IsUserExplicit  

END
GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_GetOwnerships]
AS
BEGIN
	SET NOCOUNT ON

	CREATE TABLE #Result
	(
		-- Issue raised with Azqore to do with inconsistent database collations across multiple databases and environments. 
		-- In the meantime, using COLLATE DATABASE_DEFAULT to force database collation 
		-- and work around the issue when comparing values within this stored procedure.
		TargetType VARCHAR(100) COLLATE DATABASE_DEFAULT,
		TargetPrimaryCode NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrincipalPrimaryCode NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		PrincipalType VARCHAR(10) COLLATE DATABASE_DEFAULT,
		AccessType VARCHAR(10) COLLATE DATABASE_DEFAULT
	)

	-- Contact (Owner based on the first active FormalPower.MainBusinessRelationshipId.Segment + Shares for all other Segments)
	INSERT INTO #Result
	SELECT
		'contact',
		TargetPrimaryCode,
		PrincipalPrimaryCode,
		'team',
		AccessType
	FROM (
		SELECT
			t1.PartyId AS TargetPrimaryCode,
			COALESCE(br.Segment, t1.Segment) AS PrincipalPrimaryCode,
			CASE WHEN br.Segment IS NULL THEN 'Owner' ELSE 'Share' END AS AccessType
		FROM (
			-- Owner
			SELECT 
				fp.PartyId,
				br.Segment,
				ROW_NUMBER() OVER (PARTITION BY PartyId ORDER BY TRY_CONVERT(datetime, fp.ValidFrom, 112), fp.FormalPowerId) as RowNumber
			FROM BatchLoad_Source_FormalPower fp
				JOIN BatchLoad_Source_CommercialContext br
					ON fp.MainBusinessRelationshipId = br.MainBusinessRelationshipId
				JOIN BatchLoad_Loader_Staging s
					ON s.PrimaryCode = br.PrimaryCode
					AND s.LoaderName = 'CommercialContext'
				JOIN BatchLoad_Mapping fpm
					ON fp.StatusCode = fpm.S2iValue
					AND fpm.MappingType = 'FormalPowerStateCode'
					AND fpm.WDXValue = 0
			-- Non-flagged individuals or Account Holder power (IWM-5062)
			WHERE (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
		) t1
			JOIN BatchLoad_Source_FormalPower fp
				ON t1.PartyId = fp.PartyId
				AND (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
			JOIN BatchLoad_Mapping fpm
				ON fp.StatusCode = fpm.S2iValue
				AND fpm.MappingType = 'FormalPowerStateCode'
				AND fpm.WDXValue = 0
			LEFT OUTER JOIN BatchLoad_Source_CommercialContext br
				ON fp.MainBusinessRelationshipId = br.MainBusinessRelationshipId
				AND t1.Segment <> br.Segment
		WHERE t1.RowNumber = 1
	) t2
	GROUP BY 
		TargetPrimaryCode,
		PrincipalPrimaryCode,
		AccessType



	-- Flagged individuals without Account Holder power (IWM-5062)
	INSERT INTO #Result
	SELECT DISTINCT
		'contact',
		fp.PartyId,
		'central_file',
		'team',
		'Owner'
	FROM BatchLoad_Source_FormalPower fp
	WHERE fp.IndvPauvre = 1
	AND fp.PartyId NOT IN (
		SELECT DISTINCT PartyId 
		FROM BatchLoad_Source_FormalPower fp
		WHERE fp.RoleTypeCode = '01'
	)



	-- Owner for client and account
	INSERT INTO #Result
	SELECT 
		'client',
		MainBusinessRelationshipId,
		Segment,
		'team',
		'Owner'
	FROM BatchLoad_Source_CommercialContext

	INSERT INTO #Result
	SELECT 
		'wdx_portfolio',
		cc.MainBusinessRelationshipId,
		cc.Segment,
		'team',
		'Owner'
	FROM BatchLoad_Source_Account a
		JOIN BatchLoad_Source_CommercialContext cc ON a.MainBusinessRelationshipId = cc.MainBusinessRelationshipId



	----------------------------------
	-- Intervenant Security Exceptions
	----------------------------------
	SELECT 
		m1.S2iValue AS RoleTypeCode,
		m2.WDXValue AS ConnectionRoleId
	INTO #RoleTypeCodeToConnectionRoleId
	FROM BatchLoad_Mapping m1
		JOIN BatchLoad_Mapping m2
			ON m1.WDXValue = m2.S2iValue
			AND m2.MappingType = 'ConnectionRoleTypeOutbound'
	WHERE m1.MappingType = 'ConnectionRoleTypeInbound'		


	SELECT 
		pa.ProductAccountId,
		pa.MainBusinessRelationshipId,
		u.UserPrimaryCode
	INTO #IntevenantExceptions
	FROM BatchLoad_Source_SecurityException se
		JOIN BatchLoad_Source_Account pa
			ON pa.ProductAccountId BETWEEN se.T_CRIT1 AND se.T_CRIT2
		JOIN BatchLoad_Source_CommercialContext cc
			ON pa.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN v_BatchLoad_Security_User u
			ON u.UserId = se.C_USERID
	WHERE se.C_TYPE_INFO = 'CDRAC'
	AND se.RangeSize BETWEEN 1 AND 25
	GROUP BY
		pa.ProductAccountId,
		pa.MainBusinessRelationshipId,
		u.UserPrimaryCode


	INSERT INTO #Result
	SELECT 
		'wdx_portfolio',
		ie.ProductAccountId,
		ie.UserPrimaryCode,
		'systemuser',
		'Share'
	FROM #IntevenantExceptions ie


	INSERT INTO #Result
	SELECT 
		'client',
		ie.MainBusinessRelationshipId,
		ie.UserPrimaryCode,
		'systemuser',
		'Share'
	FROM #IntevenantExceptions ie


	INSERT INTO #Result
	SELECT 
		'contact',
		fp.PartyId,
		ie.UserPrimaryCode,
		'systemuser',
		'Share'
	FROM #IntevenantExceptions ie
		JOIN BatchLoad_Source_FormalPower fp
			ON ie.ProductAccountId = fp.BusinessRelationshipId
			AND (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
	GROUP BY
		fp.PartyId,
		ie.UserPrimaryCode
	

	INSERT INTO #Result
	SELECT 
		'connection',
		fp.PartyId + '_' + fp.MainBusinessRelationshipId + '_' + m.ConnectionRoleId,
		ie.UserPrimaryCode,
		'systemuser',
		'Share'
	FROM #IntevenantExceptions ie
		JOIN BatchLoad_Source_FormalPower fp
			ON ie.ProductAccountId = fp.BusinessRelationshipId
			AND (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
		JOIN #RoleTypeCodeToConnectionRoleId m
			ON m.RoleTypeCode = fp.RoleTypeCode
	GROUP BY
		fp.PartyId,
		fp.MainBusinessRelationshipId,
		m.ConnectionRoleId,
		ie.UserPrimaryCode


	INSERT INTO #Result
	SELECT 
		'wdx_linkedcontact',
		fp.FormalPowerId,
		ie.UserPrimaryCode,
		'systemuser',
		'Share'
	FROM #IntevenantExceptions ie
		JOIN BatchLoad_Source_FormalPower fp
			ON ie.ProductAccountId = fp.BusinessRelationshipId
	GROUP BY
		fp.FormalPowerId,
		ie.UserPrimaryCode




	-----------------------------------
	-- Service Type Security Exceptions
	-----------------------------------
	INSERT INTO #Result
	SELECT 
		'wdx_portfolio',
		pa.ProductAccountId,
		m.WDXValue,
		'team',
		'Share'
	FROM BatchLoad_Source_Account pa
		JOIN BatchLoad_Source_CommercialContext cc
			ON pa.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN BatchLoad_Mapping m
			ON pa.MandateType = m.S2iValue
			AND m.MappingType = '2'
	GROUP BY
		pa.ProductAccountId,
		m.WDXValue

	INSERT INTO #Result
	SELECT 
		'client',
		pa.MainBusinessRelationshipId,
		m.WDXValue,
		'team',
		'Share'
	FROM BatchLoad_Source_CommercialContext cc
		JOIN BatchLoad_Source_Account pa
			ON cc.MainBusinessRelationshipId = pa.MainBusinessRelationshipId
		JOIN BatchLoad_Mapping m
			ON pa.MandateType = m.S2iValue
			AND m.MappingType = '2'
	GROUP BY
		pa.MainBusinessRelationshipId,
		m.WDXValue

	INSERT INTO #Result
	SELECT 
		'contact',
		fp.PartyId,
		m.WDXValue,
		'team',
		'Share'
	FROM BatchLoad_Source_Account pa
		JOIN BatchLoad_Source_CommercialContext cc
			ON pa.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN BatchLoad_Mapping m
			ON pa.MandateType = m.S2iValue
			AND m.MappingType = '2'
		JOIN BatchLoad_Source_FormalPower fp
			ON pa.ProductAccountId = fp.BusinessRelationshipId
			AND (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
		JOIN BatchLoad_Mapping fpm
			ON fp.StatusCode = fpm.S2iValue
			AND fpm.MappingType = 'FormalPowerStateCode'
			AND fpm.WDXValue = 0
	GROUP BY
		fp.PartyId,
		m.WDXValue

	INSERT INTO #Result
	SELECT 
		'connection',
		fp.PartyId + '_' + fp.MainBusinessRelationshipId + '_' + m2.WDXValue,
		m.WDXValue,
		'team',
		'Share'
	FROM BatchLoad_Source_Account pa
		JOIN BatchLoad_Source_CommercialContext cc
			ON pa.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN BatchLoad_Mapping m
			ON pa.MandateType = m.S2iValue
			AND m.MappingType = '2'
		JOIN BatchLoad_Source_FormalPower fp
			ON pa.ProductAccountId = fp.BusinessRelationshipId
			AND (fp.IndvPauvre = 0 OR fp.RoleTypeCode = '01')
		JOIN BatchLoad_Mapping fpm
			ON fp.StatusCode = fpm.S2iValue
			AND fpm.MappingType = 'FormalPowerStateCode'
			AND fpm.WDXValue = 0
		JOIN BatchLoad_Mapping m1
			ON fp.RoleTypeCode = m1.S2iValue
			AND m1.MappingType = 'ConnectionRoleTypeInbound'
		JOIN BatchLoad_Mapping m2
			ON m1.S2iValue = m2.WDXValue
			AND m2.MappingType = 'ConnectionRoleTypeOutbound'			
	GROUP BY
		fp.PartyId,
		fp.MainBusinessRelationshipId,
		m2.WDXValue,
		m.WDXValue

	INSERT INTO #Result
	SELECT 
		'wdx_linkedcontact',
		fp.FormalPowerId,
		m.WDXValue,
		'team',
		'Share'
	FROM BatchLoad_Source_Account pa
		JOIN BatchLoad_Source_CommercialContext cc
			ON pa.MainBusinessRelationshipId = cc.MainBusinessRelationshipId
		JOIN BatchLoad_Mapping m
			ON pa.MandateType = m.S2iValue
			AND m.MappingType = '2'
		JOIN BatchLoad_Source_FormalPower fp
			ON pa.ProductAccountId = fp.BusinessRelationshipId
		JOIN BatchLoad_Mapping m1
			ON fp.RoleTypeCode = m1.S2iValue
			AND m1.MappingType = 'ConnectionRoleTypeInbound'
		JOIN BatchLoad_Mapping m2
			ON m1.S2iValue = m2.WDXValue
			AND m2.MappingType = 'ConnectionRoleTypeOutbound'			
	GROUP BY
		fp.FormalPowerId,
		m.WDXValue





	-- InformalPower (Owner to be the same as the Owner of no_indv_1 + all Shares from no_indv_1 and no_indv_2 + no_indv_2 Owner as Share)
	INSERT INTO #Result
	SELECT 
		'connection',
		ip.PrimaryCode,
		r.PrincipalPrimaryCode,
		r.PrincipalType,
		r.AccessType
	FROM BatchLoad_Source_InformalPower ip
		JOIN #Result r
			ON r.TargetPrimaryCode = ip.no_indv_1
	WHERE r.TargetType = 'contact'

	INSERT INTO #Result
	SELECT 
		'connection',
		ip.PrimaryCode,
		r1.PrincipalPrimaryCode,
		r1.PrincipalType,
		'Share'
	FROM BatchLoad_Source_InformalPower ip
		JOIN #Result r1
			ON r1.TargetPrimaryCode = ip.no_indv_2
		LEFT OUTER JOIN #Result r2
			ON r1.PrincipalPrimaryCode = r2.PrincipalPrimaryCode
	WHERE r1.TargetType = 'contact'
	AND r2.TargetType = 'contact'
	AND r2.TargetPrimaryCode IS NULL
	



	-- Commercial Group Member (mimic Shares from the corresponding Contact)
	INSERT INTO #Result
	SELECT 
		'connection',
		cgm.PrimaryCode,
		r.PrincipalPrimaryCode,
		r.PrincipalType,
		r.AccessType
	FROM BatchLoad_Source_CommercialGroupMember cgm
		JOIN #Result r
			ON r.TargetPrimaryCode = cgm.PartyId
	WHERE r.TargetType = 'contact'

	-- Commercial Group (Owner from CGM.IsPrimary + Shares from other Contacts Owners + all Contacts Shares)
	INSERT INTO #Result
	SELECT 
		'clientgroup',
		cg.CommercialGroupId,
		r.PrincipalPrimaryCode,
	    r.PrincipalType,
		r.AccessType
	FROM BatchLoad_Source_CommercialGroup cg
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON cg.CommercialGroupId = cgm.CommercialGroupId
		JOIN #Result r
			ON r.TargetPrimaryCode = cgm.PartyId
	WHERE cgm.IsPrimary = 'true'
	AND r.TargetType = 'contact'
	AND r.AccessType = 'Owner'

	INSERT INTO #Result
	SELECT 
		'clientgroup',
		cg.CommercialGroupId,
		r1.PrincipalPrimaryCode,
		r1.PrincipalType,
		'Share'
	FROM BatchLoad_Source_CommercialGroup cg
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON cg.CommercialGroupId = cgm.CommercialGroupId
		JOIN #Result r1
			ON r1.TargetPrimaryCode = cgm.PartyId
		LEFT OUTER JOIN #Result r2
			ON r2.TargetPrimaryCode = cg.CommercialGroupId
			AND r2.PrincipalPrimaryCode = r1.PrincipalPrimaryCode
	WHERE cgm.IsPrimary <> 'true'
	AND r1.TargetType = 'contact'
	AND r1.AccessType = 'Owner'
	AND r2.TargetPrimaryCode IS NULL

	INSERT INTO #Result
	SELECT 
		'clientgroup',
		cg.CommercialGroupId,
		r.PrincipalPrimaryCode,
		r.PrincipalType,
		r.AccessType
	FROM BatchLoad_Source_CommercialGroup cg
		JOIN BatchLoad_Source_CommercialGroupMember cgm
			ON cg.CommercialGroupId = cgm.CommercialGroupId
		JOIN #Result r
			ON r.TargetPrimaryCode = cgm.PartyId
	WHERE r.TargetType = 'contact'
	AND r.AccessType = 'Share'


	-- Remove Shares if User has the Operations role (as that gives them access to the whole system anyway)
	DELETE r
	FROM #Result r
		JOIN v_BatchLoad_Security_UserRole ur
			ON r.PrincipalPrimaryCode = ur.UserPrimaryCode
			AND r.PrincipalType = 'systemuser'
			AND r.AccessType = 'Share'
			AND ur.RoleName = 'Operations'


	-- Todo Remove Shares if Owner Team and Share With Team are under the same Business Unit

	SELECT 
		TargetType,
		TargetPrimaryCode,
		PrincipalPrimaryCode,
		PrincipalType,
		AccessType
	FROM #Result
	GROUP BY
		TargetType,
		TargetPrimaryCode,
		PrincipalPrimaryCode,
		PrincipalType,
		AccessType
	ORDER BY 
		TargetType,
		TargetPrimaryCode,
		AccessType

END

GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_PopulateStaging]
	@LoaderId	UNIQUEIDENTIFIER,
	@LoaderName VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON

	-- Make sure there is at least one row before we proceed
	IF (EXISTS (SELECT TOP 1 * FROM BatchLoad_Loader_Heap WHERE LoaderName = @LoaderName)) BEGIN

		-- Delete duplicates
		;WITH cte AS 
		(
			-- Order by Record to make sure we always delete the same duplicates regardless of the order in which the records are located in the table
		   SELECT LoaderName, PrimaryCode, RowNumber = ROW_NUMBER() OVER (PARTITION BY LoaderName, PrimaryCode ORDER BY LoaderName, PrimaryCode, Record)
		   FROM BatchLoad_Loader_Heap
		)
		DELETE FROM cte WHERE RowNumber > 1


		-- New records never processed before
		INSERT INTO BatchLoad_Loader_Staging (
			LoaderId,
			LoaderName,
			Record,
			PrimaryCode,
			PrimaryFields,
			SecondaryFields,
			Priority)
		SELECT
			@LoaderId,
			LoaderName,
			Record,
			PrimaryCode,
			PrimaryFields,
			SecondaryFields,
			1
		FROM BatchLoad_Loader_Heap r
		WHERE NOT EXISTS
		(
			SELECT 1
			FROM BatchLoad_Loader_Staging rs WITH (NOLOCK)
			WHERE r.LoaderName = rs.LoaderName
			AND r.PrimaryCode  = rs.PrimaryCode
		)
		AND r.LoaderName = @LoaderName



		-- Updated records (same primary code but different content)
		UPDATE rs
		SET
			LoaderId               = @LoaderId,
			Record                 = r.Record,
			ModifiedOn             = GETUTCDATE(),
			ProcessingOn           = NULL,
			ProcessedOn            = NULL,
			ProcessedStatus        = NULL,
			ProcessedStatusDetails = NULL,
			ProcessedTrace         = NULL,
			ProcessedBy            = NULL,
			PrimaryFields          = r.PrimaryFields,
			SecondaryFields        = r.SecondaryFields,
			Priority               = CASE 
										  WHEN r.PrimaryFields <> rs.PrimaryFields THEN 1 
										  WHEN (r.SecondaryFields <> rs.SecondaryFields AND rs.ProcessedStatus IS NOT NULL) THEN 2
										  ELSE 1
									 END
		FROM BatchLoad_Loader_Staging rs WITH (NOLOCK)
			JOIN BatchLoad_Loader_Heap r WITH (NOLOCK)
				ON r.LoaderName   = rs.LoaderName
				AND r.PrimaryCode = rs.PrimaryCode
		WHERE rs.Record <> r.Record
		AND r.LoaderName = @LoaderName



		-- Deleted records (deleted in the source file)
		UPDATE rs
		SET 
			LoaderId               = @LoaderId,
			DeletedOn              = GETUTCDATE(),
			ProcessingOn           = NULL,
			ProcessedOn            = NULL,
			ProcessedStatus        = NULL,
			ProcessedStatusDetails = NULL,
			ProcessedTrace         = NULL,
			ProcessedBy            = NULL,
			Priority               = 1
		FROM BatchLoad_Loader_Staging rs WITH (NOLOCK)
			LEFT OUTER JOIN BatchLoad_Loader_Heap r WITH (NOLOCK)
				ON rs.LoaderName   = r.LoaderName
				AND rs.PrimaryCode = r.PrimaryCode
		WHERE r.PrimaryCode IS NULL
		AND rs.DeletedOn IS NULL
		AND rs.LoaderName = @LoaderName



		-- Deleted records added again (processed before, then deleted and now appear again in the source file)
		UPDATE rs
		SET
			LoaderId               = @LoaderId,
			Record                 = r.Record,
			ModifiedOn             = GETUTCDATE(),
			DeletedOn              = NULL,
			ProcessingOn           = NULL,
			ProcessedOn            = NULL,
			ProcessedStatus        = NULL,
			ProcessedStatusDetails = NULL,
			ProcessedTrace         = NULL,
			ProcessedBy            = NULL,
			Priority               = 1
		FROM BatchLoad_Loader_Staging rs WITH (NOLOCK)
			JOIN BatchLoad_Loader_Heap r WITH (NOLOCK)
				ON r.LoaderName   = rs.LoaderName
				AND r.PrimaryCode = rs.PrimaryCode
		WHERE rs.DeletedOn IS NOT NULL
		AND r.LoaderName = @LoaderName

	END


	-- Clear up any unfinished loaders (we should only have these if we kill process while in the middle of processing)
	UPDATE BatchLoad_Loader_Staging
    SET LoaderId               = @LoaderId,
		ProcessingOn           = NULL,
        ProcessedOn            = NULL,
        ProcessedStatus        = NULL,
		ProcessedStatusDetails = NULL,
        ProcessedTrace         = NULL,
		ProcessedBy            = NULL
    WHERE ProcessedStatus NOT IN ('Success', 'Warning', 'Error', 'Ignore')
	AND ProcessedStatus IS NOT NULL
    AND LoaderName = @LoaderName

END
GO

CREATE PROCEDURE [dbo].[sp_BatchLoad_GetInformalPowers]
AS
 
BEGIN
	SET NOCOUNT ON

	CREATE TABLE #Result
	( 
	    PrimaryCode			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		partyAssociationId	NVARCHAR(250) COLLATE DATABASE_DEFAULT,
		no_indv_1			NVARCHAR(250) COLLATE DATABASE_DEFAULT,
		no_indv_2			NVARCHAR(250) COLLATE DATABASE_DEFAULT,
		typ_rel				NVARCHAR(250) COLLATE DATABASE_DEFAULT,
		dt_ouv				NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    cd_etat				NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    dt_mut				NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    dt_clo				NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    pers_ouv			NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    pers_mut			NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	    pers_clo			NVARCHAR(250) COLLATE DATABASE_DEFAULT,
	)

	INSERT INTO #Result
	SELECT PrimaryCode,
	       partyAssociationId,
	       no_indv_1,
	       no_indv_2,
	       typ_rel,
	       dt_ouv,
	       cd_etat,
	       dt_mut,
	       dt_clo,
	       pers_ouv,
	       pers_mut,
	       pers_clo 
      FROM BatchLoad_Source_InformalPowerFile fpf  

	DECLARE @no_indv_1 nvarchar(250)
	DECLARE @no_indv_2 nvarchar(250)
	DECLARE @typ_rel nvarchar(250)
	DECLARE @no_indv_min nvarchar(250)

	DECLARE MY_CURSOR CURSOR 
	  LOCAL STATIC READ_ONLY FORWARD_ONLY
	FOR 
	  SELECT no_indv_1,no_indv_2, typ_rel FROM #Result fpf 

	OPEN MY_CURSOR
	FETCH NEXT FROM MY_CURSOR INTO  @no_indv_1, @no_indv_2, @typ_rel 
	WHILE @@FETCH_STATUS = 0
	BEGIN 
       
		SELECT  @no_indv_min  = min(no_indv_1)  
	    FROM (
			   SELECT no_indv_1 FROM  #Result  WHERE no_indv_1 = @no_indv_1 and no_indv_2 = @no_indv_2 and typ_rel =  @typ_rel
			   UNION
			   SELECT no_indv_1 FROM  #Result  WHERE no_indv_1 = @no_indv_2 and no_indv_2 = @no_indv_1 and typ_rel =  @typ_rel
	         ) w

	  DELETE FROM  #Result  WHERE no_indv_2 = @no_indv_1 and no_indv_1 = @no_indv_2 and typ_rel =  @typ_rel and no_indv_1 = @no_indv_min and exists
	   (SELECT 1 FROM  #Result  WHERE no_indv_1 = @no_indv_1 and no_indv_2 = @no_indv_2 and typ_rel =  @typ_rel)	 
 
		FETCH NEXT FROM MY_CURSOR INTO @no_indv_1, @no_indv_2 , @typ_rel
	END
	CLOSE MY_CURSOR
	DEALLOCATE MY_CURSOR  
 
	select PrimaryCode,
		   partyAssociationId,
		   no_indv_1,
		   no_indv_2,
		   typ_rel,
		   dt_ouv,
		   cd_etat,
		   dt_mut,
		   dt_clo,
           pers_ouv,
		   pers_mut,
	       pers_clo 
	FROM #Result
END
GO

declare @WDXDBNAME VARCHAR(50);

SELECT @WDXDBNAME = UPPER(DB_NAME());

DELETE FROM BatchLoad_SpecialTeams

IF CHARINDEX('_BEL',@WDXDBNAME) > 0
	begin
--------------------
-- V2 Batch Load Data
---------------------
INSERT INTO BatchLoad_SpecialTeams VALUES('0B', 'FICHIER CENTRAL', '', 'central_file', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'DEONTO-RH-JUR', '', 'compliance', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('EP', 'WEALTH PLANNING', '', 'gws', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'DEONTO-RH-JUR', '', 'legal', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '£CP', 'tax', 'Tax Compliance', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('23', 'DIR. COMMERCIALE', '', 'commercial_management', '', 'Operations,Private Banker', 'commercial_management,central_file,compliance,gws,legal', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '$CI', 'COIN', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('0G', 'RISQ.CI.', '', '', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('20', 'ADVISORY DESK', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('22', 'MARKETING', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'PORTAL_TEMPLATE_ADMIN', 'CAI ADMIN USERS', '', '', 1, 'Client Portal Administrator')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'WDXINTERNALADMIN', 'WDX INTERNAL ADMIN', '', '', 1, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'EVERYONE', 'Everyone', '', '', 0, 'Default Team')
	end
ELSE IF CHARINDEX('_ESP',@WDXDBNAME) > 0
	begin
---------------------
-- V2 Batch Load Data
---------------------
INSERT INTO BatchLoad_SpecialTeams VALUES('0B', 'FICHIER CENTRAL', '', 'central_file', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'COMPLIANCE/RH', '', 'compliance', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('PL', 'WEALTH PLANNING', '', 'gws', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('24', 'JURIDIQUES', '', 'legal', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '£CP', 'tax', 'Tax Compliance', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('23', 'DIR. COMMERCIALE', '', 'commercial_management', '', 'Operations,Private Banker', 'commercial_management,central_file,compliance,gws,legal', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '$CI', 'COIN', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('0G', 'RISQUES', '', '', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('20', 'ADVISORY DESK', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('22', 'MARKETING', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'PORTAL_TEMPLATE_ADMIN', 'CAI ADMIN USERS', '', '', 1, 'Client Portal Administrator')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'WDXINTERNALADMIN', 'WDX INTERNAL ADMIN', '', '', 1, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'EVERYONE', 'Everyone', '', '', 0, 'Default Team')
	end
ELSE IF CHARINDEX('_CFM',@WDXDBNAME) > 0
	begin
---------------------
-- V2 Batch Load Data
---------------------
INSERT INTO BatchLoad_SpecialTeams VALUES('0B', 'CLIENT DATA', '', 'central_file', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'COMPLIANCE', '', 'compliance', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('30', 'POLE STRUCTURING & FINANCING', '', 'gws', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('24', 'DIRECTION DES AFFAIRES JURIDIQUES', '', 'legal', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'COMPLIANCE', '', 'tax', 'Tax Compliance', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('WA', 'BUSINESS MANAGEMENT', '', '', '', 'Operations,Private Banker', 'commercial_management,central_file,compliance,gws,legal', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('0G', 'RISQUES CREDIT', '', '', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '$GV', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '£19', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'PORTAL_TEMPLATE_ADMIN', 'CAI ADMIN USERS', '', '', 1, 'Client Portal Administrator')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'WDXINTERNALADMIN', 'WDX INTERNAL ADMIN', '', '', 1, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'EVERYONE', 'Everyone', '', '', 0, 'Default Team')
	end
ELSE
	begin
---------------------
-- V2 Batch Load Data
---------------------
INSERT INTO BatchLoad_SpecialTeams VALUES('0B', 'FICHIER CENTRAL', '', 'central_file', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('29', 'DEONTOLOGIE', '', 'compliance', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('PL', 'WEALTH PLANNING', '', 'gws', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('24', 'JURIDIQUE (+ SEC. GENERAL)', '', 'legal', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '£T$', 'tax', 'Tax Compliance', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('23', 'DIRECTION COMMERCIALE', '', 'commercial_management', '', 'Operations,Private Banker', 'commercial_management,central_file,compliance,gws,legal', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('28', 'CONTROLE INTERNE', '', 'COIN', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('0G', 'CREDITS RISQUES BANQUE PRIVEE', '', '', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('20', 'ADVISORY DESK', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('22', 'MARKETING', '', '', '', 'Adviser', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'PORTAL_TEMPLATE_ADMIN', 'CAI ADMIN USERS', '', '', 1, 'Client Portal Administrator')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'WDXINTERNALADMIN', 'WDX INTERNAL ADMIN', '', '', 1, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('', '', '', 'EVERYONE', 'Everyone', '', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('G5', 'GESTION DISCRETIONNAIRE', '', '', '', 'Operations', '', 0, 'Default Team')
INSERT INTO BatchLoad_SpecialTeams VALUES('08', 'FX-ADVISORY', '', '', '', 'Operations', '', 0, 'Default Team')

	end



DELETE FROM BatchLoad_AccountOwner_RoleType;

begin 
INSERT INTO BatchLoad_AccountOwner_RoleType VALUES('01') 
end

IF CHARINDEX('_SGS',@WDXDBNAME) > 0
BEGIN 
INSERT INTO BatchLoad_AccountOwner_RoleType VALUES('99') 
END



DELETE FROM BatchLoad_Loader_Type
INSERT INTO BatchLoad_Loader_Type (LoaderName, IsDisabled, IsSecurity, IsReference, IsTableOnly, IsFiltered, HasHeapTable, Position, LoadIntoHeapGroup, IsFileRequired) 
							      VALUES ('AccessRight',                      0, 1, 0, 1, 0, 1,  1, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('Department',                       0, 1, 0, 1, 0, 1,  2, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('GeographicZone',                   0, 1, 0, 1, 0, 1,  3, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('Segment',                          0, 1, 0, 1, 0, 1,  4, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('Service',                          0, 1, 0, 1, 0, 1,  5, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('User',                             0, 1, 0, 1, 0, 1,  6, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('BusinessUnit',                     0, 1, 0, 0, 0, 1, 10, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Team',                             0, 1, 0, 0, 0, 1, 11, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ResponsibleParty',                 0, 1, 0, 0, 0, 1, 12, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('SystemUser',                       0, 1, 0, 0, 0, 1, 13, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ReferenceDataRemediation',         0, 0, 1, 0, 0, 1, 14, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ClientSubCategory',                0, 0, 1, 0, 0, 1, 15, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Country',                          0, 0, 1, 0, 0, 1, 16, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Currency',                         0, 0, 1, 0, 0, 1, 17, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('DocumentType',                     0, 0, 1, 0, 0, 1, 18, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ExternalCustomerCode',             0, 0, 1, 0, 0, 1, 19, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('IndividualAddressType',            0, 0, 1, 0, 0, 1, 20, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Language',                         0, 0, 1, 0, 0, 1, 20, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ManagementProfile',                0, 0, 1, 0, 0, 1, 21, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Provider',                         0, 0, 1, 0, 0, 1, 22, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ReferenceDataType',                0, 0, 1, 0, 0, 1, 23, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Title',                            0, 0, 1, 0, 0, 1, 24, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ExchangeRate',                     0, 0, 1, 0, 0, 1, 25, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('WdxCommercialContext',             0, 0, 0, 1, 0, 1, 26, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('CommercialGroup',                  0, 0, 0, 0, 0, 1, 26, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Organisation',                     0, 0, 0, 0, 1, 1, 27, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('Person',                           0, 0, 0, 0, 1, 1, 28, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('BusinessRelationship',             0, 0, 0, 0, 1, 1, 29, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('ProductAccount',                   0, 0, 0, 0, 1, 1, 29, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('CommercialContext',                0, 0, 0, 0, 1, 1, 30, 2, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('Account',                          0, 0, 0, 0, 1, 1, 31, 2, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('FormalPowerFile',                  0, 0, 0, 0, 1, 1, 32, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('FormalPower',                      0, 0, 0, 0, 1, 1, 33, 2, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('ContactPoint',                     0, 0, 0, 0, 1, 1, 34, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('InformalPowerFile',                0, 0, 0, 0, 1, 1, 35, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('InformalPower',                    0, 0, 0, 0, 1, 1, 36, 2, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDIVIDU',                         0, 0, 0, 0, 1, 1, 37, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDV_CMTR',                        0, 0, 0, 1, 0, 1, 38, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDV_CPLM',                        0, 0, 0, 0, 1, 1, 39, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDV_CPLM2',                       0, 0, 0, 0, 1, 1, 40, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDV_PAYS_ACVT',                   0, 0, 0, 0, 1, 1, 41, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('INDV_QUEST_PAYS',                  0, 0, 0, 0, 1, 1, 42, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('INTV',                             0, 0, 0, 0, 1, 1, 43, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('SUIVI_REL_CLI',                    0, 0, 0, 0, 1, 1, 44, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('CESO',                             0, 0, 0, 0, 1, 1, 45, 1, 1)
INSERT INTO BatchLoad_Loader_Type VALUES ('PartyTaxCountry',                  0, 0, 0, 1, 0, 1, 46, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('CommercialGroupMember',            0, 0, 0, 0, 1, 1, 50, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AssetClass',                       0, 0, 0, 1, 0, 0, 51, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('GeogView',                         0, 0, 0, 1, 0, 0, 52, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AssetType',                        0, 0, 0, 1, 0, 0, 53, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('SubPortfolio',                     0, 0, 0, 1, 0, 0, 54, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('LastContactDate',                  0, 0, 0, 0, 1, 1, 55, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Party',                            0, 0, 0, 0, 1, 1, 56, 3, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('Ownership',                        0, 0, 0, 0, 1, 1, 57, 4, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('DKYC',                             0, 0, 0, 0, 1, 1, 58, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQPERP',                          0, 0, 0, 0, 1, 1, 59, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQPERM',                          0, 0, 0, 0, 1, 1, 60, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQBP',                            0, 0, 0, 0, 1, 1, 61, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQCONT',                          0, 0, 0, 0, 1, 1, 62, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQASSET',                         0, 0, 0, 0, 1, 1, 63, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQLIAB',                          0, 0, 0, 0, 1, 1, 64, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQINCOME',                        0, 0, 0, 0, 1, 1, 65, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQEXPENS',                        0, 0, 0, 0, 1, 1, 66, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQSHARE',                         0, 0, 0, 0, 1, 1, 67, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('AVQP2PREL',                        0, 0, 0, 0, 1, 1, 68, 5, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('EAI',                              0, 0, 0, 0, 0, 1, 69, 4, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('CountryAgreements',                0, 0, 0, 0, 0, 1, 70, 4, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ContactsForCRSRecalc',             0, 0, 0, 0, 0, 0, 71, 6, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('CRSRecalc',                        0, 0, 0, 0, 0, 0, 72, 7, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('ProductAccountInvestorProfiling',  0, 0, 0, 0, 1, 1, 73, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('GedIndividual',                    0, 0, 0, 0, 0, 0, 74, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('GedIntervenant',                   0, 0, 0, 0, 0, 0, 75, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('IdocProduct',                      0, 0, 0, 0, 0, 0, 76, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('IdocParty',                        0, 0, 0, 0, 0, 0, 77, 2, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('PersonBankerSegment',              0, 0, 0, 0, 1, 1, 78, 1, 0)
INSERT INTO BatchLoad_Loader_Type VALUES ('PowerType',                        0, 0, 1, 0, 0, 1, 79, 1, 0)

GO
